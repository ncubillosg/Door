
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00001e24  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000000b8  00001e24  00001e24  00001e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000020  00001edc  00001edc  00001f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  00001efc  00001efc  00001f50  2**2
                  ALLOC
  4 .debug_abbrev 00000619  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001681  00000000  00000000  00002569  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001a2c  00000000  00000000  00003bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000004f0  00000000  00000000  00005618  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000146c  00000000  00000000  00005b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000524  00000000  00000000  00006f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000009b  00000000  00000000  00007498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00007533  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00007573  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000006d4  00000000  00000000  000075bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000011  00000000  00000000  00007c8f  2**0
                  CONTENTS, READONLY

Desensamblado de la sección .text:

00000000 <_ftext>:
       0:	98 00 00 00 	xor r0,r0,r0
       4:	d0 00 00 00 	wcsr IE,r0
       8:	78 01 00 00 	mvhi r1,0x0
       c:	38 21 00 00 	ori r1,r1,0x0
      10:	d0 e1 00 00 	wcsr EBA,r1
      14:	f8 00 00 3b 	calli 100 <_crt0>
      18:	34 00 00 00 	nop
      1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
      20:	34 00 00 00 	nop
      24:	34 00 00 00 	nop
      28:	34 00 00 00 	nop
      2c:	34 00 00 00 	nop
      30:	34 00 00 00 	nop
      34:	34 00 00 00 	nop
      38:	34 00 00 00 	nop
      3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
      40:	34 00 00 00 	nop
      44:	34 00 00 00 	nop
      48:	34 00 00 00 	nop
      4c:	34 00 00 00 	nop
      50:	34 00 00 00 	nop
      54:	34 00 00 00 	nop
      58:	34 00 00 00 	nop
      5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
      60:	34 00 00 00 	nop
      64:	34 00 00 00 	nop
      68:	34 00 00 00 	nop
      6c:	34 00 00 00 	nop
      70:	34 00 00 00 	nop
      74:	34 00 00 00 	nop
      78:	34 00 00 00 	nop
      7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
      80:	34 00 00 00 	nop
      84:	34 00 00 00 	nop
      88:	34 00 00 00 	nop
      8c:	34 00 00 00 	nop
      90:	34 00 00 00 	nop
      94:	34 00 00 00 	nop
      98:	34 00 00 00 	nop
      9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
      a0:	34 00 00 00 	nop
      a4:	34 00 00 00 	nop
      a8:	34 00 00 00 	nop
      ac:	34 00 00 00 	nop
      b0:	34 00 00 00 	nop
      b4:	34 00 00 00 	nop
      b8:	34 00 00 00 	nop
      bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
      c0:	5b 9d 00 00 	sw (sp+0),ra
      c4:	f8 00 00 2b 	calli 170 <_save_all>
      c8:	90 40 08 00 	rcsr r1,IP
      cc:	f8 00 05 67 	calli 1668 <irq_handler>
      d0:	78 01 ff ff 	mvhi r1,0xffff
      d4:	38 21 ff ff 	ori r1,r1,0xffff
      d8:	d0 41 00 00 	wcsr IP,r1
      dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
      e0:	34 00 00 00 	nop
      e4:	34 00 00 00 	nop
      e8:	34 00 00 00 	nop
      ec:	34 00 00 00 	nop
      f0:	34 00 00 00 	nop
      f4:	34 00 00 00 	nop
      f8:	34 00 00 00 	nop
      fc:	34 00 00 00 	nop

00000100 <_crt0>:
     100:	78 1c 00 00 	mvhi sp,0x0
     104:	3b 9c 1f fc 	ori sp,sp,0x1ffc
     108:	78 1a 00 00 	mvhi gp,0x0
     10c:	3b 5a 1f 00 	ori gp,gp,0x1f00
     110:	78 01 00 00 	mvhi r1,0x0
     114:	38 21 1e fc 	ori r1,r1,0x1efc
     118:	78 03 00 00 	mvhi r3,0x0
     11c:	38 63 1f 88 	ori r3,r3,0x1f88

00000120 <.clearBSS>:
     120:	44 23 00 04 	be r1,r3,130 <.callMain>
     124:	58 20 00 00 	sw (r1+0),r0
     128:	34 21 00 04 	addi r1,r1,4
     12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
     130:	34 01 00 00 	mvi r1,0
     134:	34 02 00 00 	mvi r2,0
     138:	34 03 00 00 	mvi r3,0
     13c:	f8 00 04 e9 	calli 14e0 <main>

00000140 <irq_enable>:
     140:	34 01 00 01 	mvi r1,1
     144:	d0 01 00 00 	wcsr IE,r1
     148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
     14c:	34 01 00 00 	mvi r1,0
     150:	d0 01 00 00 	wcsr IE,r1
     154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
     158:	d0 21 00 00 	wcsr IM,r1
     15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
     160:	90 20 08 00 	rcsr r1,IM
     164:	c3 a0 00 00 	ret

00000168 <jump>:
     168:	c0 20 00 00 	b r1

0000016c <halt>:
     16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
     170:	37 9c ff 80 	addi sp,sp,-128
     174:	5b 81 00 04 	sw (sp+4),r1
     178:	5b 82 00 08 	sw (sp+8),r2
     17c:	5b 83 00 0c 	sw (sp+12),r3
     180:	5b 84 00 10 	sw (sp+16),r4
     184:	5b 85 00 14 	sw (sp+20),r5
     188:	5b 86 00 18 	sw (sp+24),r6
     18c:	5b 87 00 1c 	sw (sp+28),r7
     190:	5b 88 00 20 	sw (sp+32),r8
     194:	5b 89 00 24 	sw (sp+36),r9
     198:	5b 8a 00 28 	sw (sp+40),r10
     19c:	5b 9e 00 78 	sw (sp+120),ea
     1a0:	5b 9f 00 7c 	sw (sp+124),ba
     1a4:	2b 81 00 80 	lw r1,(sp+128)
     1a8:	5b 81 00 74 	sw (sp+116),r1
     1ac:	bb 80 08 00 	mv r1,sp
     1b0:	34 21 00 80 	addi r1,r1,128
     1b4:	5b 81 00 70 	sw (sp+112),r1
     1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
     1bc:	2b 81 00 04 	lw r1,(sp+4)
     1c0:	2b 82 00 08 	lw r2,(sp+8)
     1c4:	2b 83 00 0c 	lw r3,(sp+12)
     1c8:	2b 84 00 10 	lw r4,(sp+16)
     1cc:	2b 85 00 14 	lw r5,(sp+20)
     1d0:	2b 86 00 18 	lw r6,(sp+24)
     1d4:	2b 87 00 1c 	lw r7,(sp+28)
     1d8:	2b 88 00 20 	lw r8,(sp+32)
     1dc:	2b 89 00 24 	lw r9,(sp+36)
     1e0:	2b 8a 00 28 	lw r10,(sp+40)
     1e4:	2b 9d 00 74 	lw ra,(sp+116)
     1e8:	2b 9e 00 78 	lw ea,(sp+120)
     1ec:	2b 9f 00 7c 	lw ba,(sp+124)
     1f0:	2b 9c 00 70 	lw sp,(sp+112)
     1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
     1f8:	bb 80 08 00 	mv r1,sp
     1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
     200:	bb 40 08 00 	mv r1,gp
     204:	c3 a0 00 00 	ret

00000208 <setBit>:
#define    TReloadRegL      0x2D << 1
#define    TCounterValueRegH    0x2E << 1  // shows the 16-bit timer value
#define    TCounterValueRegL    0x2F << 1

void setBit(char reg, char mask)
{
     208:	37 9c ff f4 	addi sp,sp,-12
     20c:	5b 8b 00 0c 	sw (sp+12),r11
     210:	5b 8c 00 08 	sw (sp+8),r12
     214:	5b 9d 00 04 	sw (sp+4),ra
     218:	20 2b 00 ff 	andi r11,r1,0xff
	char tmp;
	tmp = spi_read(reg);
     21c:	b9 60 08 00 	mv r1,r11
#define    TReloadRegL      0x2D << 1
#define    TCounterValueRegH    0x2E << 1  // shows the 16-bit timer value
#define    TCounterValueRegL    0x2F << 1

void setBit(char reg, char mask)
{
     220:	20 4c 00 ff 	andi r12,r2,0xff
	char tmp;
	tmp = spi_read(reg);
     224:	f8 00 06 0a 	calli 1a4c <spi_read>
	spi_write(reg, tmp | mask);   
     228:	b8 2c 10 00 	or r2,r1,r12
     22c:	20 42 00 ff 	andi r2,r2,0xff
     230:	b9 60 08 00 	mv r1,r11
     234:	f8 00 06 19 	calli 1a98 <spi_write>
}
     238:	2b 9d 00 04 	lw ra,(sp+4)
     23c:	2b 8b 00 0c 	lw r11,(sp+12)
     240:	2b 8c 00 08 	lw r12,(sp+8)
     244:	37 9c 00 0c 	addi sp,sp,12
     248:	c3 a0 00 00 	ret

0000024c <clearBit>:
void clearBit(char reg, char mask)
{
     24c:	37 9c ff f4 	addi sp,sp,-12
     250:	5b 8b 00 0c 	sw (sp+12),r11
     254:	5b 8c 00 08 	sw (sp+8),r12
     258:	5b 9d 00 04 	sw (sp+4),ra
     25c:	20 2b 00 ff 	andi r11,r1,0xff
	char tmp;
	tmp = spi_read(reg);
     260:	b9 60 08 00 	mv r1,r11
	char tmp;
	tmp = spi_read(reg);
	spi_write(reg, tmp | mask);   
}
void clearBit(char reg, char mask)
{
     264:	20 4c 00 ff 	andi r12,r2,0xff
	char tmp;
	tmp = spi_read(reg);
     268:	f8 00 05 f9 	calli 1a4c <spi_read>
	spi_write(reg, tmp & (~mask));
     26c:	a5 80 10 00 	not r2,r12
     270:	a0 22 08 00 	and r1,r1,r2
     274:	20 22 00 ff 	andi r2,r1,0xff
     278:	b9 60 08 00 	mv r1,r11
     27c:	f8 00 06 07 	calli 1a98 <spi_write>
}
     280:	2b 9d 00 04 	lw ra,(sp+4)
     284:	2b 8b 00 0c 	lw r11,(sp+12)
     288:	2b 8c 00 08 	lw r12,(sp+8)
     28c:	37 9c 00 0c 	addi sp,sp,12
     290:	c3 a0 00 00 	ret

00000294 <initRfidReader>:

void initRfidReader()
{
     294:	37 9c ff fc 	addi sp,sp,-4
     298:	5b 9d 00 04 	sw (sp+4),ra
	//Make Soft Reset
	spi_write(CommandReg, PCD_RESETPHASE);
     29c:	34 01 00 02 	mvi r1,2
     2a0:	34 02 00 0f 	mvi r2,15
     2a4:	f8 00 05 fd 	calli 1a98 <spi_write>
	while (spi_read(CommandReg) & (1<<4));
     2a8:	34 01 00 02 	mvi r1,2
     2ac:	f8 00 05 e8 	calli 1a4c <spi_read>
     2b0:	20 21 00 10 	andi r1,r1,0x10
     2b4:	5c 20 ff fd 	bne r1,r0,2a8 <initRfidReader+0x14>
    //Wait until the PCD finish reseting
	

	spi_write(TModeReg, 0x8D );      //Tauto=1; f(Timer) = 6.78MHz/TPreScaler
     2b8:	34 01 00 54 	mvi r1,84
     2bc:	34 02 00 8d 	mvi r2,141
     2c0:	f8 00 05 f6 	calli 1a98 <spi_write>
	spi_write( TPrescalerReg, 0x3E );//TModeReg[3..0] + TPrescalerReg
     2c4:	34 01 00 56 	mvi r1,86
     2c8:	34 02 00 3e 	mvi r2,62
     2cc:	f8 00 05 f3 	calli 1a98 <spi_write>
	spi_write( TReloadRegL, 0x30 );           
     2d0:	34 01 00 5a 	mvi r1,90
     2d4:	34 02 00 30 	mvi r2,48
     2d8:	f8 00 05 f0 	calli 1a98 <spi_write>
	spi_write( TReloadRegH, 0x0 );   //WWWWWWWWWARNING: colocar ambo ceros o revisar que hace el registro
     2dc:	34 01 00 58 	mvi r1,88
     2e0:	34 02 00 00 	mvi r2,0
     2e4:	f8 00 05 ed 	calli 1a98 <spi_write>
	spi_write( TxAutoReg, 0x40 );    //100%ASK
     2e8:	34 01 00 2a 	mvi r1,42
     2ec:	34 02 00 40 	mvi r2,64
     2f0:	f8 00 05 ea 	calli 1a98 <spi_write>
	spi_write( ModeReg, 0x3D );
     2f4:	34 01 00 22 	mvi r1,34
     2f8:	34 02 00 3d 	mvi r2,61
     2fc:	f8 00 05 e7 	calli 1a98 <spi_write>

	//AntennaON
	setBit( TxControlReg, 0x03 );
     300:	34 01 00 28 	mvi r1,40
     304:	34 02 00 03 	mvi r2,3
     308:	fb ff ff c0 	calli 208 <setBit>
	
	//FINISH INIT 
}
     30c:	2b 9d 00 04 	lw ra,(sp+4)
     310:	37 9c 00 04 	addi sp,sp,4
     314:	c3 a0 00 00 	ret

00000318 <loop>:

uint32_t loop()
{
     318:	37 9c ff b0 	addi sp,sp,-80
     31c:	5b 8b 00 44 	sw (sp+68),r11
     320:	5b 8c 00 40 	sw (sp+64),r12
     324:	5b 8d 00 3c 	sw (sp+60),r13
     328:	5b 8e 00 38 	sw (sp+56),r14
     32c:	5b 8f 00 34 	sw (sp+52),r15
     330:	5b 90 00 30 	sw (sp+48),r16
     334:	5b 91 00 2c 	sw (sp+44),r17
     338:	5b 92 00 28 	sw (sp+40),r18
     33c:	5b 93 00 24 	sw (sp+36),r19
     340:	5b 94 00 20 	sw (sp+32),r20
     344:	5b 95 00 1c 	sw (sp+28),r21
     348:	5b 96 00 18 	sw (sp+24),r22
     34c:	5b 97 00 14 	sw (sp+20),r23
     350:	5b 98 00 10 	sw (sp+16),r24
     354:	5b 99 00 0c 	sw (sp+12),r25
     358:	5b 9b 00 08 	sw (sp+8),fp
     35c:	5b 9d 00 04 	sw (sp+4),ra
	
	
	//IS_CARD
	//REQUEST

	spi_write( BitFramingReg, 0x07 );
     360:	34 01 00 1a 	mvi r1,26
     364:	34 02 00 07 	mvi r2,7
     368:	f8 00 05 cc 	calli 1a98 <spi_write>

	//TO_CARD
	char irqEn = 0x77;
	//Serial.println(irqEn, HEX);
	spi_write( ComIEnReg, irqEn | 0x80 );
     36c:	34 01 00 04 	mvi r1,4
     370:	34 02 00 f7 	mvi r2,247
     374:	f8 00 05 c9 	calli 1a98 <spi_write>
	clearBit( ComIrqReg, 0x80 );
     378:	34 01 00 08 	mvi r1,8
     37c:	34 02 00 80 	mvi r2,128
     380:	fb ff ff b3 	calli 24c <clearBit>
	setBit( FIFOLevelReg, 0x80 );
     384:	34 01 00 14 	mvi r1,20
     388:	34 02 00 80 	mvi r2,128
     38c:	fb ff ff 9f 	calli 208 <setBit>
	spi_write( CommandReg, PCD_IDLE );
     390:	34 01 00 02 	mvi r1,2
     394:	34 02 00 00 	mvi r2,0
     398:	f8 00 05 c0 	calli 1a98 <spi_write>
	spi_write( FIFODataReg, 0x26 );   //Escribiendo
     39c:	34 01 00 12 	mvi r1,18
     3a0:	34 02 00 26 	mvi r2,38
     3a4:	f8 00 05 bd 	calli 1a98 <spi_write>
	spi_write( CommandReg, PCD_TRANSCEIVE );
     3a8:	34 01 00 02 	mvi r1,2
     3ac:	34 02 00 0c 	mvi r2,12
     3b0:	f8 00 05 ba 	calli 1a98 <spi_write>
	setBit( BitFramingReg, 0x80 );
     3b4:	34 01 00 1a 	mvi r1,26
     3b8:	34 02 00 80 	mvi r2,128
     3bc:	fb ff ff 93 	calli 208 <setBit>

	char flag = 1;
	while(flag)
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
     3c0:	34 01 00 08 	mvi r1,8
     3c4:	f8 00 05 a2 	calli 1a4c <spi_read>
     3c8:	b8 20 60 00 	mv r12,r1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
     3cc:	21 8b 00 01 	andi r11,r12,0x1
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
     3d0:	34 01 00 01 	mvi r1,1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
     3d4:	5d 60 00 0a 	bne r11,r0,3fc <loop+0xe4>
	char n;
	char waitIrq = 0x30;


	char flag = 1;
	while(flag)
     3d8:	21 8c 00 30 	andi r12,r12,0x30
		if(n & 0x01)
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
     3dc:	f8 00 04 d3 	calli 1728 <msleep>
	char n;
	char waitIrq = 0x30;


	char flag = 1;
	while(flag)
     3e0:	5d 8b 00 09 	bne r12,r11,404 <loop+0xec>
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
     3e4:	34 01 00 08 	mvi r1,8
     3e8:	f8 00 05 99 	calli 1a4c <spi_read>
     3ec:	b8 20 60 00 	mv r12,r1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
     3f0:	21 8b 00 01 	andi r11,r12,0x1
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
     3f4:	34 01 00 01 	mvi r1,1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
     3f8:	45 60 ff f8 	be r11,r0,3d8 <loop+0xc0>
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
     3fc:	34 01 00 01 	mvi r1,1
     400:	f8 00 04 ca 	calli 1728 <msleep>
		
	}
	
	flag=1;

	clearBit ( BitFramingReg, 0x80 );
     404:	34 02 00 80 	mvi r2,128
     408:	34 01 00 1a 	mvi r1,26
     40c:	fb ff ff 90 	calli 24c <clearBit>
	char lec;
	lec = spi_read( ErrorReg);
     410:	34 01 00 0c 	mvi r1,12
     414:	f8 00 05 8e 	calli 1a4c <spi_read>
		//Serial.println("status=MI_OK, todo va bien");
		if ( n & irqEn & 0x01 )     // WARNING: Parece ser otra lectura de un posible error, pero pues
			//Serial.println("status=NOTAGERR, NO todo va bien");
	}*/
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
     418:	34 01 00 14 	mvi r1,20
     41c:	f8 00 05 8c 	calli 1a4c <spi_read>
     420:	b8 20 60 00 	mv r12,r1
	uart_putstr("-------");
	uart_putstr("\n\r");*/
	
	char i=0;
	
	while (i<n)
     424:	44 20 00 07 	be r1,r0,440 <loop+0x128>
     428:	34 0b 00 00 	mvi r11,0

		/*uart_putchar(secondDigit);
		uart_putchar(firstDigit);                                                Para prueba NFC
		uart_putstr("\n\r");*/
		
		i=i+1;
     42c:	35 6b 00 01 	addi r11,r11,1
	
	char i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
     430:	34 01 00 12 	mvi r1,18

		/*uart_putchar(secondDigit);
		uart_putchar(firstDigit);                                                Para prueba NFC
		uart_putstr("\n\r");*/
		
		i=i+1;
     434:	21 6b 00 ff 	andi r11,r11,0xff
	
	char i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
     438:	f8 00 05 85 	calli 1a4c <spi_read>
	uart_putstr("-------");
	uart_putstr("\n\r");*/
	
	char i=0;
	
	while (i<n)
     43c:	55 8b ff fc 	bgu r12,r11,42c <loop+0x114>
	//FIN IS_CARD

	//READ_CARD_SERIAL

	//ANTICOLL
	spi_write( BitFramingReg, 0x00 );
     440:	34 01 00 1a 	mvi r1,26
     444:	34 02 00 00 	mvi r2,0
     448:	f8 00 05 94 	calli 1a98 <spi_write>
	clearBit( Status2Reg, 0x08 );     //WARGNING: no presente en anterior ejemplo del cuaderno, tal vez puede ser omitido
     44c:	34 01 00 10 	mvi r1,16
     450:	34 02 00 08 	mvi r2,8
     454:	fb ff ff 7e 	calli 24c <clearBit>
	
	
	//TO_CARD

	spi_write( ComIEnReg, irqEn | 0x80 );
     458:	34 01 00 04 	mvi r1,4
     45c:	34 02 00 f7 	mvi r2,247
     460:	f8 00 05 8e 	calli 1a98 <spi_write>
	clearBit( ComIrqReg, 0x80 );
     464:	34 01 00 08 	mvi r1,8
     468:	34 02 00 80 	mvi r2,128
     46c:	fb ff ff 78 	calli 24c <clearBit>
	setBit( FIFOLevelReg, 0x80 );
     470:	34 01 00 14 	mvi r1,20
     474:	34 02 00 80 	mvi r2,128
     478:	fb ff ff 64 	calli 208 <setBit>
	spi_write( CommandReg, PCD_IDLE );
     47c:	34 01 00 02 	mvi r1,2
     480:	34 02 00 00 	mvi r2,0
     484:	f8 00 05 85 	calli 1a98 <spi_write>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
     488:	34 01 00 12 	mvi r1,18
     48c:	34 02 00 93 	mvi r2,147
     490:	f8 00 05 82 	calli 1a98 <spi_write>
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
     494:	34 01 00 12 	mvi r1,18
     498:	34 02 00 20 	mvi r2,32
     49c:	f8 00 05 7f 	calli 1a98 <spi_write>
	spi_write( CommandReg, PCD_TRANSCEIVE );
     4a0:	34 01 00 02 	mvi r1,2
     4a4:	34 02 00 0c 	mvi r2,12
     4a8:	f8 00 05 7c 	calli 1a98 <spi_write>
	setBit( BitFramingReg, 0x80 );
     4ac:	34 01 00 1a 	mvi r1,26
     4b0:	34 02 00 80 	mvi r2,128
     4b4:	fb ff ff 55 	calli 208 <setBit>
	
	while(flag)
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
     4b8:	34 01 00 08 	mvi r1,8
     4bc:	f8 00 05 64 	calli 1a4c <spi_read>
     4c0:	b8 20 60 00 	mv r12,r1
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
     4c4:	21 8b 00 01 	andi r11,r12,0x1
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
     4c8:	34 01 00 01 	mvi r1,1
		n =spi_read( ComIrqReg );
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
     4cc:	5d 60 00 0a 	bne r11,r0,4f4 <loop+0x1dc>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
	spi_write( CommandReg, PCD_TRANSCEIVE );
	setBit( BitFramingReg, 0x80 );
	
	while(flag)
     4d0:	21 8c 00 30 	andi r12,r12,0x30
		if(n & 0x01){
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
     4d4:	f8 00 04 95 	calli 1728 <msleep>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
	spi_write( CommandReg, PCD_TRANSCEIVE );
	setBit( BitFramingReg, 0x80 );
	
	while(flag)
     4d8:	5d 8b 00 09 	bne r12,r11,4fc <loop+0x1e4>
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
     4dc:	34 01 00 08 	mvi r1,8
     4e0:	f8 00 05 5b 	calli 1a4c <spi_read>
     4e4:	b8 20 60 00 	mv r12,r1
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
     4e8:	21 8b 00 01 	andi r11,r12,0x1
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
     4ec:	34 01 00 01 	mvi r1,1
		n =spi_read( ComIrqReg );
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
     4f0:	45 60 ff f8 	be r11,r0,4d0 <loop+0x1b8>
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
     4f4:	34 01 00 01 	mvi r1,1
     4f8:	f8 00 04 8c 	calli 1728 <msleep>
	}
	
	flag = 1;

	clearBit( BitFramingReg, 0x80 );
     4fc:	34 01 00 1a 	mvi r1,26
     500:	34 02 00 80 	mvi r2,128
     504:	fb ff ff 52 	calli 24c <clearBit>

		if ( n & irqEn & 0x01 )// WWWWWWWWARNING: Parece ser otra lectura de un posible error, pero pues
			Serial.println("status=NOTAGERR, NO todo va bien");
	}*/
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
     508:	34 01 00 14 	mvi r1,20
     50c:	f8 00 05 50 	calli 1a4c <spi_read>
     510:	b8 20 78 00 	mv r15,r1
        if((n+48) == '0'){
            return 'x';
     514:	34 01 00 78 	mvi r1,120
		if ( n & irqEn & 0x01 )// WWWWWWWWARNING: Parece ser otra lectura de un posible error, pero pues
			Serial.println("status=NOTAGERR, NO todo va bien");
	}*/
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
        if((n+48) == '0'){
     518:	45 e0 00 50 	be r15,r0,658 <loop+0x340>
     51c:	34 0b 00 00 	mvi r11,0
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
		//uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
     520:	34 0e 00 09 	mvi r14,9
		
		if(i==0){
		uno = secondDigit;
		dos = firstDigit;
		}
		if(i==1){
     524:	34 12 00 01 	mvi r18,1
		tres = secondDigit;
		cuatro = firstDigit;
		}
		if(i==2){
     528:	34 15 00 02 	mvi r21,2
		cinco = secondDigit;
		seis = firstDigit;
		}
		if(i==3){
     52c:	34 19 00 03 	mvi r25,3
		siete = secondDigit;
		ocho = firstDigit;
		}
		if(i==4){
     530:	34 18 00 04 	mvi r24,4

	i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
     534:	34 01 00 12 	mvi r1,18
     538:	f8 00 05 45 	calli 1a4c <spi_read>
		//uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
     53c:	20 23 00 0f 	andi r3,r1,0xf
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
     540:	34 6d 00 37 	addi r13,r3,55
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
		//uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
     544:	54 6e 00 02 	bgu r3,r14,54c <loop+0x234>
			firstDigit=firstDigit+48;
     548:	34 6d 00 30 	addi r13,r3,48
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
     54c:	00 22 00 04 	srui r2,r1,4
     550:	20 42 00 ff 	andi r2,r2,0xff
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;
     554:	34 4c 00 37 	addi r12,r2,55
     558:	21 8c 00 ff 	andi r12,r12,0xff
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
     55c:	54 4e 00 03 	bgu r2,r14,568 <loop+0x250>
			secondDigit=secondDigit+48;
     560:	34 42 00 30 	addi r2,r2,48
     564:	20 4c 00 ff 	andi r12,r2,0xff

		/*uart_putchar(secondDigit);
		uart_putchar(firstDigit);
		uart_putstr("\n\r");*/
		
		msleep(10);
     568:	34 01 00 0a 	mvi r1,10
     56c:	f8 00 04 6f 	calli 1728 <msleep>
		
		if(i==0){
     570:	45 60 00 4d 	be r11,r0,6a4 <loop+0x38c>
		uno = secondDigit;
		dos = firstDigit;
		}
		if(i==1){
     574:	5d 72 00 4f 	bne r11,r18,6b0 <loop+0x398>
		tres = secondDigit;
		cuatro = firstDigit;
     578:	b9 a0 98 00 	mv r19,r13
		if(i==0){
		uno = secondDigit;
		dos = firstDigit;
		}
		if(i==1){
		tres = secondDigit;
     57c:	b9 80 a0 00 	mv r20,r12
		diez = firstDigit;
		}

		msleep(10);

		i=i+1;
     580:	35 6b 00 01 	addi r11,r11,1
		if(i==4){
		nueve = secondDigit;
		diez = firstDigit;
		}

		msleep(10);
     584:	34 01 00 0a 	mvi r1,10

		i=i+1;
     588:	21 6b 00 ff 	andi r11,r11,0xff
		if(i==4){
		nueve = secondDigit;
		diez = firstDigit;
		}

		msleep(10);
     58c:	f8 00 04 67 	calli 1728 <msleep>
	uart_putstr("-------");
	uart_putstr("\n\r");*/	

	i=0;
	
	while (i<n)
     590:	55 eb ff e9 	bgu r15,r11,534 <loop+0x21c>
		i=i+1;

		
	}
	
	if((uno == 'E') && (dos == 'B') &&(tres == 'D') &&(cuatro == 'F') &&(cinco == '3') &&(seis == 'B') &&(siete == '4') &&(ocho == '0') &&(nueve == '4') &&(diez == 'F')||(uno == '2') && (dos == 'B') &&(tres == 'A') &&(cuatro == 'D') &&(cinco == '3') &&(seis == '4') &&(siete == '4') &&(ocho == '0') &&(nueve == 'F') &&(diez == '2'))
     594:	66 31 00 42 	cmpei r17,r17,66
     598:	66 01 00 45 	cmpei r1,r16,69
     59c:	a2 21 08 00 	and r1,r17,r1
     5a0:	44 20 00 15 	be r1,r0,5f4 <loop+0x2dc>
     5a4:	66 62 00 46 	cmpei r2,r19,70
     5a8:	66 81 00 44 	cmpei r1,r20,68
     5ac:	a0 41 08 00 	and r1,r2,r1
     5b0:	44 20 00 11 	be r1,r0,5f4 <loop+0x2dc>
     5b4:	66 e2 00 42 	cmpei r2,r23,66
     5b8:	66 c1 00 33 	cmpei r1,r22,51
     5bc:	a0 41 08 00 	and r1,r2,r1
     5c0:	44 20 00 0d 	be r1,r0,5f4 <loop+0x2dc>
     5c4:	2b 81 00 48 	lw r1,(sp+72)
     5c8:	64 22 00 30 	cmpei r2,r1,48
     5cc:	67 61 00 34 	cmpei r1,fp,52
     5d0:	a0 41 08 00 	and r1,r2,r1
     5d4:	44 20 00 08 	be r1,r0,5f4 <loop+0x2dc>
     5d8:	2b 81 00 4c 	lw r1,(sp+76)
     5dc:	64 23 00 46 	cmpei r3,r1,70
     5e0:	2b 81 00 50 	lw r1,(sp+80)
     5e4:	64 22 00 34 	cmpei r2,r1,52
	{
		return 'n';
     5e8:	34 01 00 6e 	mvi r1,110
		i=i+1;

		
	}
	
	if((uno == 'E') && (dos == 'B') &&(tres == 'D') &&(cuatro == 'F') &&(cinco == '3') &&(seis == 'B') &&(siete == '4') &&(ocho == '0') &&(nueve == '4') &&(diez == 'F')||(uno == '2') && (dos == 'B') &&(tres == 'A') &&(cuatro == 'D') &&(cinco == '3') &&(seis == '4') &&(siete == '4') &&(ocho == '0') &&(nueve == 'F') &&(diez == '2'))
     5ec:	a0 62 10 00 	and r2,r3,r2
     5f0:	5c 40 00 1a 	bne r2,r0,658 <loop+0x340>
     5f4:	66 10 00 32 	cmpei r16,r16,50
	{
		return 'n';
	}
	else
	{
		return 'f';
     5f8:	34 01 00 66 	mvi r1,102
		i=i+1;

		
	}
	
	if((uno == 'E') && (dos == 'B') &&(tres == 'D') &&(cuatro == 'F') &&(cinco == '3') &&(seis == 'B') &&(siete == '4') &&(ocho == '0') &&(nueve == '4') &&(diez == 'F')||(uno == '2') && (dos == 'B') &&(tres == 'A') &&(cuatro == 'D') &&(cinco == '3') &&(seis == '4') &&(siete == '4') &&(ocho == '0') &&(nueve == 'F') &&(diez == '2'))
     5fc:	a2 30 88 00 	and r17,r17,r16
     600:	46 20 00 16 	be r17,r0,658 <loop+0x340>
     604:	66 73 00 44 	cmpei r19,r19,68
     608:	66 94 00 41 	cmpei r20,r20,65
     60c:	a2 74 98 00 	and r19,r19,r20
     610:	46 60 00 12 	be r19,r0,658 <loop+0x340>
     614:	66 e2 00 34 	cmpei r2,r23,52
     618:	66 d6 00 33 	cmpei r22,r22,51
     61c:	a0 56 10 00 	and r2,r2,r22
     620:	44 40 00 0e 	be r2,r0,658 <loop+0x340>
     624:	2b 83 00 48 	lw r3,(sp+72)
     628:	67 7b 00 34 	cmpei fp,fp,52
     62c:	64 62 00 30 	cmpei r2,r3,48
     630:	a0 5b 10 00 	and r2,r2,fp
     634:	44 40 00 09 	be r2,r0,658 <loop+0x340>
     638:	2b 81 00 4c 	lw r1,(sp+76)
     63c:	2b 83 00 50 	lw r3,(sp+80)
     640:	64 22 00 32 	cmpei r2,r1,50
     644:	64 61 00 46 	cmpei r1,r3,70
	{
		return 'n';
	}
	else
	{
		return 'f';
     648:	a0 41 08 00 	and r1,r2,r1
     64c:	c8 01 08 00 	sub r1,r0,r1
     650:	20 21 00 08 	andi r1,r1,0x8
     654:	34 21 00 66 	addi r1,r1,102
	}

}
     658:	2b 9d 00 04 	lw ra,(sp+4)
     65c:	2b 8b 00 44 	lw r11,(sp+68)
     660:	2b 8c 00 40 	lw r12,(sp+64)
     664:	2b 8d 00 3c 	lw r13,(sp+60)
     668:	2b 8e 00 38 	lw r14,(sp+56)
     66c:	2b 8f 00 34 	lw r15,(sp+52)
     670:	2b 90 00 30 	lw r16,(sp+48)
     674:	2b 91 00 2c 	lw r17,(sp+44)
     678:	2b 92 00 28 	lw r18,(sp+40)
     67c:	2b 93 00 24 	lw r19,(sp+36)
     680:	2b 94 00 20 	lw r20,(sp+32)
     684:	2b 95 00 1c 	lw r21,(sp+28)
     688:	2b 96 00 18 	lw r22,(sp+24)
     68c:	2b 97 00 14 	lw r23,(sp+20)
     690:	2b 98 00 10 	lw r24,(sp+16)
     694:	2b 99 00 0c 	lw r25,(sp+12)
     698:	2b 9b 00 08 	lw fp,(sp+8)
     69c:	37 9c 00 50 	addi sp,sp,80
     6a0:	c3 a0 00 00 	ret
		
		msleep(10);
		
		if(i==0){
		uno = secondDigit;
		dos = firstDigit;
     6a4:	b9 a0 88 00 	mv r17,r13
		uart_putstr("\n\r");*/
		
		msleep(10);
		
		if(i==0){
		uno = secondDigit;
     6a8:	b9 80 80 00 	mv r16,r12
     6ac:	e3 ff ff b5 	bi 580 <loop+0x268>
		}
		if(i==1){
		tres = secondDigit;
		cuatro = firstDigit;
		}
		if(i==2){
     6b0:	5d 75 00 04 	bne r11,r21,6c0 <loop+0x3a8>
		cinco = secondDigit;
		seis = firstDigit;
     6b4:	b9 a0 b8 00 	mv r23,r13
		if(i==1){
		tres = secondDigit;
		cuatro = firstDigit;
		}
		if(i==2){
		cinco = secondDigit;
     6b8:	b9 80 b0 00 	mv r22,r12
     6bc:	e3 ff ff b1 	bi 580 <loop+0x268>
		seis = firstDigit;
		}
		if(i==3){
     6c0:	5d 79 00 04 	bne r11,r25,6d0 <loop+0x3b8>
		siete = secondDigit;
		ocho = firstDigit;
     6c4:	5b 8d 00 48 	sw (sp+72),r13
		if(i==2){
		cinco = secondDigit;
		seis = firstDigit;
		}
		if(i==3){
		siete = secondDigit;
     6c8:	b9 80 d8 00 	mv fp,r12
     6cc:	e3 ff ff ad 	bi 580 <loop+0x268>
		ocho = firstDigit;
		}
		if(i==4){
     6d0:	5d 78 ff ac 	bne r11,r24,580 <loop+0x268>
		nueve = secondDigit;
		diez = firstDigit;
     6d4:	5b 8d 00 4c 	sw (sp+76),r13
		if(i==3){
		siete = secondDigit;
		ocho = firstDigit;
		}
		if(i==4){
		nueve = secondDigit;
     6d8:	5b 8c 00 50 	sw (sp+80),r12
     6dc:	e3 ff ff a9 	bi 580 <loop+0x268>

000006e0 <writeCharlcd>:
//---------------------------------------------------------------------------
// LCD Functions
//---------------------------------------------------------------------------

void writeCharlcd (char letter) 
{
     6e0:	37 9c ff f0 	addi sp,sp,-16
     6e4:	5b 8b 00 10 	sw (sp+16),r11
     6e8:	5b 8c 00 0c 	sw (sp+12),r12
     6ec:	5b 8d 00 08 	sw (sp+8),r13
     6f0:	5b 9d 00 04 	sw (sp+4),ra
     6f4:	20 2b 00 ff 	andi r11,r1,0xff
  char highnib;
  char lownib;
  highnib = letter&0xF0;
     6f8:	21 6d 00 f0 	andi r13,r11,0xf0
  lownib = letter&0x0F;

     i2c_write(0x3F,highnib|0b00001001);
     6fc:	39 ac 00 09 	ori r12,r13,0x9
     700:	b9 80 10 00 	mv r2,r12
     704:	34 01 00 3f 	mvi r1,63
     i2c_write(0x3F,highnib|0b00001101);
     i2c_write(0x3F,highnib|0b00001001);  

     i2c_write(0x3F,(lownib<<4)|0b00001001);
     708:	3d 6b 00 1c 	sli r11,r11,28
  char highnib;
  char lownib;
  highnib = letter&0xF0;
  lownib = letter&0x0F;

     i2c_write(0x3F,highnib|0b00001001);
     70c:	f8 00 05 64 	calli 1c9c <i2c_write>
     i2c_write(0x3F,highnib|0b00001101);
     710:	39 a2 00 0d 	ori r2,r13,0xd
     i2c_write(0x3F,highnib|0b00001001);  

     i2c_write(0x3F,(lownib<<4)|0b00001001);
     714:	15 6b 00 18 	sri r11,r11,24
  char lownib;
  highnib = letter&0xF0;
  lownib = letter&0x0F;

     i2c_write(0x3F,highnib|0b00001001);
     i2c_write(0x3F,highnib|0b00001101);
     718:	34 01 00 3f 	mvi r1,63
     71c:	f8 00 05 60 	calli 1c9c <i2c_write>
     i2c_write(0x3F,highnib|0b00001001);  
     720:	b9 80 10 00 	mv r2,r12
     724:	34 01 00 3f 	mvi r1,63

     i2c_write(0x3F,(lownib<<4)|0b00001001);
     728:	39 6c 00 09 	ori r12,r11,0x9
  highnib = letter&0xF0;
  lownib = letter&0x0F;

     i2c_write(0x3F,highnib|0b00001001);
     i2c_write(0x3F,highnib|0b00001101);
     i2c_write(0x3F,highnib|0b00001001);  
     72c:	f8 00 05 5c 	calli 1c9c <i2c_write>

     i2c_write(0x3F,(lownib<<4)|0b00001001);
     730:	21 8c 00 ff 	andi r12,r12,0xff
     734:	b9 80 10 00 	mv r2,r12
     738:	34 01 00 3f 	mvi r1,63
     73c:	f8 00 05 58 	calli 1c9c <i2c_write>
     i2c_write(0x3F,(lownib<<4)|0b00001101);
     740:	39 62 00 0d 	ori r2,r11,0xd
     744:	34 01 00 3f 	mvi r1,63
     748:	20 42 00 fd 	andi r2,r2,0xfd
     74c:	f8 00 05 54 	calli 1c9c <i2c_write>
     i2c_write(0x3F,(lownib<<4)|0b00001001);
     750:	34 01 00 3f 	mvi r1,63
     754:	b9 80 10 00 	mv r2,r12
     758:	f8 00 05 51 	calli 1c9c <i2c_write>
}
     75c:	2b 9d 00 04 	lw ra,(sp+4)
     760:	2b 8b 00 10 	lw r11,(sp+16)
     764:	2b 8c 00 0c 	lw r12,(sp+12)
     768:	2b 8d 00 08 	lw r13,(sp+8)
     76c:	37 9c 00 10 	addi sp,sp,16
     770:	c3 a0 00 00 	ret

00000774 <writeCommandlcd>:




void writeCommandlcd (char command) 
{
     774:	37 9c ff f0 	addi sp,sp,-16
     778:	5b 8b 00 10 	sw (sp+16),r11
     77c:	5b 8c 00 0c 	sw (sp+12),r12
     780:	5b 8d 00 08 	sw (sp+8),r13
     784:	5b 9d 00 04 	sw (sp+4),ra
     788:	20 2b 00 ff 	andi r11,r1,0xff
  char highnib;
  char lownib;
  highnib = command&0xF0;
     78c:	21 6d 00 f0 	andi r13,r11,0xf0
  lownib = command&0x0F;

     i2c_write(0x3F,highnib|0b00001000);
     790:	39 ac 00 08 	ori r12,r13,0x8
     794:	b9 80 10 00 	mv r2,r12
     798:	34 01 00 3f 	mvi r1,63
     i2c_write(0x3F,highnib|0b00001100);
     i2c_write(0x3F,highnib|0b00001000);  

     i2c_write(0x3F,(lownib<<4)|0b00001000);
     79c:	3d 6b 00 1c 	sli r11,r11,28
  char highnib;
  char lownib;
  highnib = command&0xF0;
  lownib = command&0x0F;

     i2c_write(0x3F,highnib|0b00001000);
     7a0:	f8 00 05 3f 	calli 1c9c <i2c_write>
     i2c_write(0x3F,highnib|0b00001100);
     7a4:	39 a2 00 0c 	ori r2,r13,0xc
     i2c_write(0x3F,highnib|0b00001000);  

     i2c_write(0x3F,(lownib<<4)|0b00001000);
     7a8:	15 6b 00 18 	sri r11,r11,24
  char lownib;
  highnib = command&0xF0;
  lownib = command&0x0F;

     i2c_write(0x3F,highnib|0b00001000);
     i2c_write(0x3F,highnib|0b00001100);
     7ac:	34 01 00 3f 	mvi r1,63
     7b0:	f8 00 05 3b 	calli 1c9c <i2c_write>
     i2c_write(0x3F,highnib|0b00001000);  
     7b4:	b9 80 10 00 	mv r2,r12
     7b8:	34 01 00 3f 	mvi r1,63

     i2c_write(0x3F,(lownib<<4)|0b00001000);
     7bc:	39 6c 00 08 	ori r12,r11,0x8
  highnib = command&0xF0;
  lownib = command&0x0F;

     i2c_write(0x3F,highnib|0b00001000);
     i2c_write(0x3F,highnib|0b00001100);
     i2c_write(0x3F,highnib|0b00001000);  
     7c0:	f8 00 05 37 	calli 1c9c <i2c_write>

     i2c_write(0x3F,(lownib<<4)|0b00001000);
     7c4:	21 8c 00 ff 	andi r12,r12,0xff
     7c8:	b9 80 10 00 	mv r2,r12
     7cc:	34 01 00 3f 	mvi r1,63
     7d0:	f8 00 05 33 	calli 1c9c <i2c_write>
     i2c_write(0x3F,(lownib<<4)|0b00001100);
     7d4:	39 62 00 0c 	ori r2,r11,0xc
     7d8:	34 01 00 3f 	mvi r1,63
     7dc:	20 42 00 fc 	andi r2,r2,0xfc
     7e0:	f8 00 05 2f 	calli 1c9c <i2c_write>
     i2c_write(0x3F,(lownib<<4)|0b00001000);
     7e4:	34 01 00 3f 	mvi r1,63
     7e8:	b9 80 10 00 	mv r2,r12
     7ec:	f8 00 05 2c 	calli 1c9c <i2c_write>
}
     7f0:	2b 9d 00 04 	lw ra,(sp+4)
     7f4:	2b 8b 00 10 	lw r11,(sp+16)
     7f8:	2b 8c 00 0c 	lw r12,(sp+12)
     7fc:	2b 8d 00 08 	lw r13,(sp+8)
     800:	37 9c 00 10 	addi sp,sp,16
     804:	c3 a0 00 00 	ret

00000808 <writeStringlcd>:




void writeStringlcd (char *str) {
     808:	37 9c ff f8 	addi sp,sp,-8
     80c:	5b 8b 00 08 	sw (sp+8),r11
     810:	5b 9d 00 04 	sw (sp+4),ra
     814:	b8 20 58 00 	mv r11,r1
	char *c = str;
	while(*c) {
     818:	40 21 00 00 	lbu r1,(r1+0)
     81c:	44 20 00 05 	be r1,r0,830 <writeStringlcd+0x28>
		writeCharlcd(*c);
		c++;
     820:	35 6b 00 01 	addi r11,r11,1


void writeStringlcd (char *str) {
	char *c = str;
	while(*c) {
		writeCharlcd(*c);
     824:	fb ff ff af 	calli 6e0 <writeCharlcd>



void writeStringlcd (char *str) {
	char *c = str;
	while(*c) {
     828:	41 61 00 00 	lbu r1,(r11+0)
     82c:	5c 20 ff fd 	bne r1,r0,820 <writeStringlcd+0x18>
		writeCharlcd(*c);
		c++;
	}
}
     830:	2b 9d 00 04 	lw ra,(sp+4)
     834:	2b 8b 00 08 	lw r11,(sp+8)
     838:	37 9c 00 08 	addi sp,sp,8
     83c:	c3 a0 00 00 	ret

00000840 <clearDisplay>:

// LCD_I2C CONFIG
// DB7 DB6 DB5 DB4 CTRST EN RW RS

void clearDisplay() 
{
     840:	37 9c ff fc 	addi sp,sp,-4
     844:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00000001);
     848:	34 01 00 01 	mvi r1,1
     84c:	fb ff ff ca 	calli 774 <writeCommandlcd>
}
     850:	2b 9d 00 04 	lw ra,(sp+4)
     854:	37 9c 00 04 	addi sp,sp,4
     858:	c3 a0 00 00 	ret

0000085c <returnHome>:

void returnHome()
{
     85c:	37 9c ff fc 	addi sp,sp,-4
     860:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00000010);
     864:	34 01 00 02 	mvi r1,2
     868:	fb ff ff c3 	calli 774 <writeCommandlcd>
   msleep(2);
     86c:	34 01 00 02 	mvi r1,2
     870:	f8 00 03 ae 	calli 1728 <msleep>
}
     874:	2b 9d 00 04 	lw ra,(sp+4)
     878:	37 9c 00 04 	addi sp,sp,4
     87c:	c3 a0 00 00 	ret

00000880 <entryModeSet2>:

// I/D = 1, S=0
void entryModeSet2()
{  
     880:	37 9c ff fc 	addi sp,sp,-4
     884:	5b 9d 00 04 	sw (sp+4),ra
  
   writeCommandlcd(0b00000110);
     888:	34 01 00 06 	mvi r1,6
     88c:	fb ff ff ba 	calli 774 <writeCommandlcd>
   msleep(1);
     890:	34 01 00 01 	mvi r1,1
     894:	f8 00 03 a5 	calli 1728 <msleep>
}
     898:	2b 9d 00 04 	lw ra,(sp+4)
     89c:	37 9c 00 04 	addi sp,sp,4
     8a0:	c3 a0 00 00 	ret

000008a4 <entryModeSet>:

// I/D = 1, S=1
void entryModeSet()
{  
     8a4:	37 9c ff fc 	addi sp,sp,-4
     8a8:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00000111);
     8ac:	34 01 00 07 	mvi r1,7
     8b0:	fb ff ff b1 	calli 774 <writeCommandlcd>
   msleep(1);
     8b4:	34 01 00 01 	mvi r1,1
     8b8:	f8 00 03 9c 	calli 1728 <msleep>
}
     8bc:	2b 9d 00 04 	lw ra,(sp+4)
     8c0:	37 9c 00 04 	addi sp,sp,4
     8c4:	c3 a0 00 00 	ret

000008c8 <entryModeSet3>:


// I/D = 0, S=0
void entryModeSet3()
{  
     8c8:	37 9c ff fc 	addi sp,sp,-4
     8cc:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00000100);
     8d0:	34 01 00 04 	mvi r1,4
     8d4:	fb ff ff a8 	calli 774 <writeCommandlcd>
   msleep(1);
     8d8:	34 01 00 01 	mvi r1,1
     8dc:	f8 00 03 93 	calli 1728 <msleep>
}
     8e0:	2b 9d 00 04 	lw ra,(sp+4)
     8e4:	37 9c 00 04 	addi sp,sp,4
     8e8:	c3 a0 00 00 	ret

000008ec <entryModeSet4>:

// I/D = 0, S=1
void entryModeSet4()
{  
     8ec:	37 9c ff fc 	addi sp,sp,-4
     8f0:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00000101);
     8f4:	34 01 00 05 	mvi r1,5
     8f8:	fb ff ff 9f 	calli 774 <writeCommandlcd>
   msleep(1);
     8fc:	34 01 00 01 	mvi r1,1
     900:	f8 00 03 8a 	calli 1728 <msleep>
}
     904:	2b 9d 00 04 	lw ra,(sp+4)
     908:	37 9c 00 04 	addi sp,sp,4
     90c:	c3 a0 00 00 	ret

00000910 <displayOff>:


void displayOff()
{  
     910:	37 9c ff fc 	addi sp,sp,-4
     914:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00001000);
     918:	34 01 00 08 	mvi r1,8
     91c:	fb ff ff 96 	calli 774 <writeCommandlcd>
   msleep(1);
     920:	34 01 00 01 	mvi r1,1
     924:	f8 00 03 81 	calli 1728 <msleep>
}
     928:	2b 9d 00 04 	lw ra,(sp+4)
     92c:	37 9c 00 04 	addi sp,sp,4
     930:	c3 a0 00 00 	ret

00000934 <displayOn>:

// D=1, C=1, B=1
void displayOn()
{  
     934:	37 9c ff fc 	addi sp,sp,-4
     938:	5b 9d 00 04 	sw (sp+4),ra

   writeCommandlcd(0b00001111);
     93c:	34 01 00 0f 	mvi r1,15
     940:	fb ff ff 8d 	calli 774 <writeCommandlcd>
   msleep(1);
     944:	34 01 00 01 	mvi r1,1
     948:	f8 00 03 78 	calli 1728 <msleep>
}
     94c:	2b 9d 00 04 	lw ra,(sp+4)
     950:	37 9c 00 04 	addi sp,sp,4
     954:	c3 a0 00 00 	ret

00000958 <cursorShiftRight>:


// S/C = 0, R/L = 1
void cursorShiftRight()
{  
     958:	37 9c ff fc 	addi sp,sp,-4
     95c:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00010100);
     960:	34 01 00 14 	mvi r1,20
     964:	fb ff ff 84 	calli 774 <writeCommandlcd>
   msleep(1);
     968:	34 01 00 01 	mvi r1,1
     96c:	f8 00 03 6f 	calli 1728 <msleep>
}
     970:	2b 9d 00 04 	lw ra,(sp+4)
     974:	37 9c 00 04 	addi sp,sp,4
     978:	c3 a0 00 00 	ret

0000097c <cursorShiftLeft>:



// S/C = 0, R/L = 0
void cursorShiftLeft()
{  
     97c:	37 9c ff fc 	addi sp,sp,-4
     980:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00010000);
     984:	34 01 00 10 	mvi r1,16
     988:	fb ff ff 7b 	calli 774 <writeCommandlcd>
   msleep(1);
     98c:	34 01 00 01 	mvi r1,1
     990:	f8 00 03 66 	calli 1728 <msleep>
}
     994:	2b 9d 00 04 	lw ra,(sp+4)
     998:	37 9c 00 04 	addi sp,sp,4
     99c:	c3 a0 00 00 	ret

000009a0 <displayShiftRight>:


// S/C = 1, R/L = 1
void displayShiftRight()
{   
     9a0:	37 9c ff fc 	addi sp,sp,-4
     9a4:	5b 9d 00 04 	sw (sp+4),ra

   writeCommandlcd(0b00011100);
     9a8:	34 01 00 1c 	mvi r1,28
     9ac:	fb ff ff 72 	calli 774 <writeCommandlcd>
   msleep(1);
     9b0:	34 01 00 01 	mvi r1,1
     9b4:	f8 00 03 5d 	calli 1728 <msleep>
}
     9b8:	2b 9d 00 04 	lw ra,(sp+4)
     9bc:	37 9c 00 04 	addi sp,sp,4
     9c0:	c3 a0 00 00 	ret

000009c4 <displayShiftLeft>:


// S/C = 1, R/L = 0
void displayShiftLeft()
{  
     9c4:	37 9c ff fc 	addi sp,sp,-4
     9c8:	5b 9d 00 04 	sw (sp+4),ra
   writeCommandlcd(0b00011000);
     9cc:	34 01 00 18 	mvi r1,24
     9d0:	fb ff ff 69 	calli 774 <writeCommandlcd>
   msleep(1);
     9d4:	34 01 00 01 	mvi r1,1
     9d8:	f8 00 03 54 	calli 1728 <msleep>
}
     9dc:	2b 9d 00 04 	lw ra,(sp+4)
     9e0:	37 9c 00 04 	addi sp,sp,4
     9e4:	c3 a0 00 00 	ret

000009e8 <functionSet>:


// D/L = 0, N = 1, F = 0
//4-Bit mode, 2 lines, 5x8 dots
void functionSet()
{  
     9e8:	37 9c ff fc 	addi sp,sp,-4
     9ec:	5b 9d 00 04 	sw (sp+4),ra

   writeCommandlcd(0b00101000);
     9f0:	34 01 00 28 	mvi r1,40
     9f4:	fb ff ff 60 	calli 774 <writeCommandlcd>
   msleep(1);
     9f8:	34 01 00 01 	mvi r1,1
     9fc:	f8 00 03 4b 	calli 1728 <msleep>
}
     a00:	2b 9d 00 04 	lw ra,(sp+4)
     a04:	37 9c 00 04 	addi sp,sp,4
     a08:	c3 a0 00 00 	ret

00000a0c <displayAddress>:




   void displayAddress(uint8_t col, uint8_t row){
     a0c:	37 9c ff ec 	addi sp,sp,-20
     a10:	5b 9d 00 04 	sw (sp+4),ra
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     a14:	34 03 00 40 	mvi r3,64
     a18:	5b 83 00 0c 	sw (sp+12),r3
     a1c:	34 03 00 14 	mvi r3,20
     a20:	5b 83 00 10 	sw (sp+16),r3
     a24:	34 03 00 54 	mvi r3,84
     a28:	5b 83 00 14 	sw (sp+20),r3
}




   void displayAddress(uint8_t col, uint8_t row){
     a2c:	20 42 00 ff 	andi r2,r2,0xff
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     a30:	5b 80 00 08 	sw (sp+8),r0
	if ( row > 2 ) {
     a34:	34 04 00 02 	mvi r4,2
}




   void displayAddress(uint8_t col, uint8_t row){
     a38:	20 21 00 ff 	andi r1,r1,0xff
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if ( row > 2 ) {
     a3c:	34 03 00 40 	mvi r3,64
     a40:	54 44 00 05 	bgu r2,r4,a54 <displayAddress+0x48>
     a44:	3c 42 00 02 	sli r2,r2,2
     a48:	37 83 00 14 	addi r3,sp,20
     a4c:	b4 62 10 00 	add r2,r3,r2
     a50:	40 43 ff f7 	lbu r3,(r2+-9)
		row = 2-1;    // we count rows starting w/0
	}
        writeCommandlcd (0x80|(col + row_offsets[row]));
     a54:	b4 61 08 00 	add r1,r3,r1
     a58:	20 21 00 7f 	andi r1,r1,0x7f
     a5c:	38 21 00 80 	ori r1,r1,0x80
     a60:	fb ff ff 45 	calli 774 <writeCommandlcd>
}
     a64:	2b 9d 00 04 	lw ra,(sp+4)
     a68:	37 9c 00 14 	addi sp,sp,20
     a6c:	c3 a0 00 00 	ret

00000a70 <lcdInit>:



void lcdInit ()
{  //1
     a70:	37 9c ff fc 	addi sp,sp,-4
     a74:	5b 9d 00 04 	sw (sp+4),ra
   // LCD_I2C CONFIG
   // DB7 DB6 DB5 DB4 CTRST EN RW RS
   msleep(50);
     a78:	34 01 00 32 	mvi r1,50
     a7c:	f8 00 03 2b 	calli 1728 <msleep>
   i2c_write(0x3F,0b00111000);
     a80:	34 01 00 3f 	mvi r1,63
     a84:	34 02 00 38 	mvi r2,56
     a88:	f8 00 04 85 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00111100);
     a8c:	34 01 00 3f 	mvi r1,63
     a90:	34 02 00 3c 	mvi r2,60
     a94:	f8 00 04 82 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00111000);
     a98:	34 02 00 38 	mvi r2,56
     a9c:	34 01 00 3f 	mvi r1,63
     aa0:	f8 00 04 7f 	calli 1c9c <i2c_write>
   msleep(5);
     aa4:	34 01 00 05 	mvi r1,5
     aa8:	f8 00 03 20 	calli 1728 <msleep>
   
   //2
   i2c_write(0x3F,0b00111000);
     aac:	34 01 00 3f 	mvi r1,63
     ab0:	34 02 00 38 	mvi r2,56
     ab4:	f8 00 04 7a 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00111100);
     ab8:	34 01 00 3f 	mvi r1,63
     abc:	34 02 00 3c 	mvi r2,60
     ac0:	f8 00 04 77 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00111000);
     ac4:	34 02 00 38 	mvi r2,56
     ac8:	34 01 00 3f 	mvi r1,63
     acc:	f8 00 04 74 	calli 1c9c <i2c_write>
   msleep(5);
     ad0:	34 01 00 05 	mvi r1,5
     ad4:	f8 00 03 15 	calli 1728 <msleep>
   //3
   i2c_write(0x3F,0b00111000);
     ad8:	34 01 00 3f 	mvi r1,63
     adc:	34 02 00 38 	mvi r2,56
     ae0:	f8 00 04 6f 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00111100);
     ae4:	34 01 00 3f 	mvi r1,63
     ae8:	34 02 00 3c 	mvi r2,60
     aec:	f8 00 04 6c 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00111000);
     af0:	34 02 00 38 	mvi r2,56
     af4:	34 01 00 3f 	mvi r1,63
     af8:	f8 00 04 69 	calli 1c9c <i2c_write>
   msleep(1);
     afc:	34 01 00 01 	mvi r1,1
     b00:	f8 00 03 0a 	calli 1728 <msleep>
   //5
   i2c_write(0x3F,0b00101000);
     b04:	34 01 00 3f 	mvi r1,63
     b08:	34 02 00 28 	mvi r2,40
     b0c:	f8 00 04 64 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00101100);
     b10:	34 01 00 3f 	mvi r1,63
     b14:	34 02 00 2c 	mvi r2,44
     b18:	f8 00 04 61 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00101000);
     b1c:	34 02 00 28 	mvi r2,40
     b20:	34 01 00 3f 	mvi r1,63
     b24:	f8 00 04 5e 	calli 1c9c <i2c_write>
   msleep(1);
     b28:	34 01 00 01 	mvi r1,1
     b2c:	f8 00 02 ff 	calli 1728 <msleep>
   //6
   i2c_write(0x3F,0b00101000);
     b30:	34 01 00 3f 	mvi r1,63
     b34:	34 02 00 28 	mvi r2,40
     b38:	f8 00 04 59 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00101100);
     b3c:	34 01 00 3f 	mvi r1,63
     b40:	34 02 00 2c 	mvi r2,44
     b44:	f8 00 04 56 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00101000);
     b48:	34 02 00 28 	mvi r2,40
     b4c:	34 01 00 3f 	mvi r1,63
     b50:	f8 00 04 53 	calli 1c9c <i2c_write>
   msleep(1);
     b54:	34 01 00 01 	mvi r1,1
     b58:	f8 00 02 f4 	calli 1728 <msleep>
   //7
   i2c_write(0x3F,0b10001000);
     b5c:	34 01 00 3f 	mvi r1,63
     b60:	34 02 00 88 	mvi r2,136
     b64:	f8 00 04 4e 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b10001100);
     b68:	34 01 00 3f 	mvi r1,63
     b6c:	34 02 00 8c 	mvi r2,140
     b70:	f8 00 04 4b 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b10001000);
     b74:	34 02 00 88 	mvi r2,136
     b78:	34 01 00 3f 	mvi r1,63
     b7c:	f8 00 04 48 	calli 1c9c <i2c_write>
   msleep(1);
     b80:	34 01 00 01 	mvi r1,1
     b84:	f8 00 02 e9 	calli 1728 <msleep>
   //8
   i2c_write(0x3F,0b00001000);
     b88:	34 01 00 3f 	mvi r1,63
     b8c:	34 02 00 08 	mvi r2,8
     b90:	f8 00 04 43 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00001100);
     b94:	34 01 00 3f 	mvi r1,63
     b98:	34 02 00 0c 	mvi r2,12
     b9c:	f8 00 04 40 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00001000);
     ba0:	34 02 00 08 	mvi r2,8
     ba4:	34 01 00 3f 	mvi r1,63
     ba8:	f8 00 04 3d 	calli 1c9c <i2c_write>
   msleep(1);
     bac:	34 01 00 01 	mvi r1,1
     bb0:	f8 00 02 de 	calli 1728 <msleep>
   //9
   i2c_write(0x3F,0b10001000);
     bb4:	34 01 00 3f 	mvi r1,63
     bb8:	34 02 00 88 	mvi r2,136
     bbc:	f8 00 04 38 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b10001100);
     bc0:	34 01 00 3f 	mvi r1,63
     bc4:	34 02 00 8c 	mvi r2,140
     bc8:	f8 00 04 35 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b10001000);
     bcc:	34 02 00 88 	mvi r2,136
     bd0:	34 01 00 3f 	mvi r1,63
     bd4:	f8 00 04 32 	calli 1c9c <i2c_write>
   msleep(1);
     bd8:	34 01 00 01 	mvi r1,1
     bdc:	f8 00 02 d3 	calli 1728 <msleep>
   //10
   i2c_write(0x3F,0b00001000);
     be0:	34 01 00 3f 	mvi r1,63
     be4:	34 02 00 08 	mvi r2,8
     be8:	f8 00 04 2d 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00001100);
     bec:	34 01 00 3f 	mvi r1,63
     bf0:	34 02 00 0c 	mvi r2,12
     bf4:	f8 00 04 2a 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00001000);
     bf8:	34 02 00 08 	mvi r2,8
     bfc:	34 01 00 3f 	mvi r1,63
     c00:	f8 00 04 27 	calli 1c9c <i2c_write>
   msleep(2);
     c04:	34 01 00 02 	mvi r1,2
     c08:	f8 00 02 c8 	calli 1728 <msleep>
   //11
   i2c_write(0x3F,0b11111000);
     c0c:	34 01 00 3f 	mvi r1,63
     c10:	34 02 00 f8 	mvi r2,248
     c14:	f8 00 04 22 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b11111100);
     c18:	34 01 00 3f 	mvi r1,63
     c1c:	34 02 00 fc 	mvi r2,252
     c20:	f8 00 04 1f 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b11111000);
     c24:	34 02 00 f8 	mvi r2,248
     c28:	34 01 00 3f 	mvi r1,63
     c2c:	f8 00 04 1c 	calli 1c9c <i2c_write>
   msleep(1);
     c30:	34 01 00 01 	mvi r1,1
     c34:	f8 00 02 bd 	calli 1728 <msleep>
   //12
   i2c_write(0x3F,0b00001000);
     c38:	34 01 00 3f 	mvi r1,63
     c3c:	34 02 00 08 	mvi r2,8
     c40:	f8 00 04 17 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00001100);
     c44:	34 01 00 3f 	mvi r1,63
     c48:	34 02 00 0c 	mvi r2,12
     c4c:	f8 00 04 14 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b00001000);
     c50:	34 02 00 08 	mvi r2,8
     c54:	34 01 00 3f 	mvi r1,63
     c58:	f8 00 04 11 	calli 1c9c <i2c_write>
   msleep(1);
     c5c:	34 01 00 01 	mvi r1,1
     c60:	f8 00 02 b2 	calli 1728 <msleep>
   //13
   i2c_write(0x3F,0b01101000);
     c64:	34 01 00 3f 	mvi r1,63
     c68:	34 02 00 68 	mvi r2,104
     c6c:	f8 00 04 0c 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b01101100);
     c70:	34 01 00 3f 	mvi r1,63
     c74:	34 02 00 6c 	mvi r2,108
     c78:	f8 00 04 09 	calli 1c9c <i2c_write>
   i2c_write(0x3F,0b01101000);
     c7c:	34 02 00 68 	mvi r2,104
     c80:	34 01 00 3f 	mvi r1,63
     c84:	f8 00 04 06 	calli 1c9c <i2c_write>
   msleep(2);
     c88:	34 01 00 02 	mvi r1,2
     c8c:	f8 00 02 a7 	calli 1728 <msleep>

}
     c90:	2b 9d 00 04 	lw ra,(sp+4)
     c94:	37 9c 00 04 	addi sp,sp,4
     c98:	c3 a0 00 00 	ret

00000c9c <getSecondRTC>:
//---------------------------------------------------------------------------


//Función para obtener los segundos del RTC
char getSecondRTC ()
{  
     c9c:	37 9c ff fc 	addi sp,sp,-4
     ca0:	5b 9d 00 04 	sw (sp+4),ra
        i2c_write(0x68,0);
     ca4:	34 02 00 00 	mvi r2,0
     ca8:	34 01 00 68 	mvi r1,104
     cac:	f8 00 03 fc 	calli 1c9c <i2c_write>
        return i2c_read(0x68);
     cb0:	34 01 00 68 	mvi r1,104
     cb4:	f8 00 04 06 	calli 1ccc <i2c_read>
}
     cb8:	2b 9d 00 04 	lw ra,(sp+4)
     cbc:	37 9c 00 04 	addi sp,sp,4
     cc0:	c3 a0 00 00 	ret

00000cc4 <getMinuteRTC>:

//Función para obtener los minutos del RTC
char getMinuteRTC ()
{
     cc4:	37 9c ff fc 	addi sp,sp,-4
     cc8:	5b 9d 00 04 	sw (sp+4),ra
     i2c_write(0x68,1);
     ccc:	34 02 00 01 	mvi r2,1
     cd0:	34 01 00 68 	mvi r1,104
     cd4:	f8 00 03 f2 	calli 1c9c <i2c_write>
     return i2c_read(0x68);
     cd8:	34 01 00 68 	mvi r1,104
     cdc:	f8 00 03 fc 	calli 1ccc <i2c_read>

}
     ce0:	2b 9d 00 04 	lw ra,(sp+4)
     ce4:	37 9c 00 04 	addi sp,sp,4
     ce8:	c3 a0 00 00 	ret

00000cec <getHourRTC>:


//Función para obtener la hora del RTC
char getHourRTC ()
{
     cec:	37 9c ff fc 	addi sp,sp,-4
     cf0:	5b 9d 00 04 	sw (sp+4),ra
     i2c_write(0x68,2);
     cf4:	34 02 00 02 	mvi r2,2
     cf8:	34 01 00 68 	mvi r1,104
     cfc:	f8 00 03 e8 	calli 1c9c <i2c_write>
     return i2c_read(0x68);  
     d00:	34 01 00 68 	mvi r1,104
     d04:	f8 00 03 f2 	calli 1ccc <i2c_read>

}
     d08:	2b 9d 00 04 	lw ra,(sp+4)
     d0c:	37 9c 00 04 	addi sp,sp,4
     d10:	c3 a0 00 00 	ret

00000d14 <asciiConv>:
// ASCII converter 
//---------------------------------------------------------------------------

char asciiConv (char number)
{
     return number+48;
     d14:	34 21 00 30 	addi r1,r1,48

}
     d18:	20 21 00 ff 	andi r1,r1,0xff
     d1c:	c3 a0 00 00 	ret

00000d20 <powerCount>:


//Funcion que devuelve el numero de potencias de 10 en el numero
char powerCount (char number, char tenpower)
{ 
     d20:	37 9c ff fc 	addi sp,sp,-4
     d24:	5b 9d 00 04 	sw (sp+4),ra
     d28:	20 23 00 ff 	andi r3,r1,0xff
     d2c:	20 41 00 ff 	andi r1,r2,0xff

    if (number == 0)
     d30:	44 60 00 06 	be r3,r0,d48 <powerCount+0x28>
        return tenpower;
    else
        return powerCount (number/10,tenpower+1);
     d34:	34 22 00 01 	addi r2,r1,1
     d38:	34 01 00 0a 	mvi r1,10
     d3c:	8c 61 08 00 	divu r1,r3,r1
     d40:	20 42 00 ff 	andi r2,r2,0xff
     d44:	fb ff ff f7 	calli d20 <powerCount>
}
     d48:	2b 9d 00 04 	lw ra,(sp+4)
     d4c:	37 9c 00 04 	addi sp,sp,4
     d50:	c3 a0 00 00 	ret

00000d54 <returnHundreds>:


char returnHundreds (char number)
{
     d54:	37 9c ff f8 	addi sp,sp,-8
     d58:	5b 8b 00 08 	sw (sp+8),r11
     d5c:	5b 9d 00 04 	sw (sp+4),ra
     d60:	20 2b 00 ff 	andi r11,r1,0xff
  char power = powerCount(number,0);
     d64:	34 02 00 00 	mvi r2,0
     d68:	b9 60 08 00 	mv r1,r11
     d6c:	fb ff ff ed 	calli d20 <powerCount>
    if (power == 3){
     d70:	34 03 00 03 	mvi r3,3
       return (number/100);
    } 
    else return 0;
     d74:	34 02 00 00 	mvi r2,0


char returnHundreds (char number)
{
  char power = powerCount(number,0);
    if (power == 3){
     d78:	5c 23 00 03 	bne r1,r3,d84 <returnHundreds+0x30>
       return (number/100);
     d7c:	34 02 00 64 	mvi r2,100
     d80:	8d 62 10 00 	divu r2,r11,r2
    } 
    else return 0;
}
     d84:	b8 40 08 00 	mv r1,r2
     d88:	2b 9d 00 04 	lw ra,(sp+4)
     d8c:	2b 8b 00 08 	lw r11,(sp+8)
     d90:	37 9c 00 08 	addi sp,sp,8
     d94:	c3 a0 00 00 	ret

00000d98 <returnTenths>:


char returnTenths (char number)
{
     d98:	37 9c ff f8 	addi sp,sp,-8
     d9c:	5b 8b 00 08 	sw (sp+8),r11
     da0:	5b 9d 00 04 	sw (sp+4),ra
    number = number%100;
     da4:	34 0b 00 64 	mvi r11,100
    else return 0;
}


char returnTenths (char number)
{
     da8:	20 21 00 ff 	andi r1,r1,0xff
    number = number%100;
     dac:	c4 2b 58 00 	modu r11,r1,r11
    char power = powerCount(number,0);
     db0:	34 02 00 00 	mvi r2,0
     db4:	b9 60 08 00 	mv r1,r11
     db8:	fb ff ff da 	calli d20 <powerCount>
    if (power >=2) {
     dbc:	34 03 00 01 	mvi r3,1
       return (number/10);
    }
   else return 0;
     dc0:	34 02 00 00 	mvi r2,0

char returnTenths (char number)
{
    number = number%100;
    char power = powerCount(number,0);
    if (power >=2) {
     dc4:	50 61 00 03 	bgeu r3,r1,dd0 <returnTenths+0x38>
       return (number/10);
     dc8:	34 02 00 0a 	mvi r2,10
     dcc:	8d 62 10 00 	divu r2,r11,r2
    }
   else return 0;
}
     dd0:	b8 40 08 00 	mv r1,r2
     dd4:	2b 9d 00 04 	lw ra,(sp+4)
     dd8:	2b 8b 00 08 	lw r11,(sp+8)
     ddc:	37 9c 00 08 	addi sp,sp,8
     de0:	c3 a0 00 00 	ret

00000de4 <returnUnits>:


char returnUnits (char number)
{
     number = number%100;
     de4:	34 02 00 64 	mvi r2,100
   else return 0;
}


char returnUnits (char number)
{
     de8:	20 21 00 ff 	andi r1,r1,0xff
     number = number%100;
     return (number%10);
     dec:	c4 22 08 00 	modu r1,r1,r2
     df0:	34 02 00 0a 	mvi r2,10
}
     df4:	c4 22 08 00 	modu r1,r1,r2
     df8:	c3 a0 00 00 	ret

00000dfc <printnumberlcd>:


// LCD Functions print ------------------------------------------------------

void printnumberlcd (char number)
{
     dfc:	37 9c ff f0 	addi sp,sp,-16
     e00:	5b 8b 00 10 	sw (sp+16),r11
     e04:	5b 8c 00 0c 	sw (sp+12),r12
     e08:	5b 8d 00 08 	sw (sp+8),r13
     e0c:	5b 9d 00 04 	sw (sp+4),ra
     e10:	20 2b 00 ff 	andi r11,r1,0xff

      char hundredascii;
      char tenthascii;
      char unitascii;
    
      hundred = returnHundreds(number);
     e14:	b9 60 08 00 	mv r1,r11
     e18:	fb ff ff cf 	calli d54 <returnHundreds>
     e1c:	b8 20 68 00 	mv r13,r1
      tenth = returnTenths(number);
     e20:	b9 60 08 00 	mv r1,r11
     e24:	fb ff ff dd 	calli d98 <returnTenths>
// ASCII converter 
//---------------------------------------------------------------------------

char asciiConv (char number)
{
     return number+48;
     e28:	35 a2 00 30 	addi r2,r13,48
      char hundredascii;
      char tenthascii;
      char unitascii;
    
      hundred = returnHundreds(number);
      tenth = returnTenths(number);
     e2c:	b8 20 60 00 	mv r12,r1
     
      hundredascii = asciiConv(hundred);
      tenthascii = asciiConv(tenth);
      unitascii = asciiConv(unit);
    
      writeCharlcd(hundredascii);
     e30:	20 41 00 ff 	andi r1,r2,0xff
     e34:	fb ff fe 2b 	calli 6e0 <writeCharlcd>
// ASCII converter 
//---------------------------------------------------------------------------

char asciiConv (char number)
{
     return number+48;
     e38:	35 81 00 30 	addi r1,r12,48
      hundredascii = asciiConv(hundred);
      tenthascii = asciiConv(tenth);
      unitascii = asciiConv(unit);
    
      writeCharlcd(hundredascii);
      writeCharlcd(tenthascii);
     e3c:	20 21 00 ff 	andi r1,r1,0xff
     e40:	fb ff fe 28 	calli 6e0 <writeCharlcd>
}


char returnUnits (char number)
{
     number = number%100;
     e44:	34 01 00 64 	mvi r1,100
     return (number%10);
     e48:	c5 61 58 00 	modu r11,r11,r1
     e4c:	34 02 00 0a 	mvi r2,10
     e50:	c5 62 08 00 	modu r1,r11,r2
      tenthascii = asciiConv(tenth);
      unitascii = asciiConv(unit);
    
      writeCharlcd(hundredascii);
      writeCharlcd(tenthascii);
      writeCharlcd(unitascii);
     e54:	34 21 00 30 	addi r1,r1,48
     e58:	fb ff fe 22 	calli 6e0 <writeCharlcd>
} 
     e5c:	2b 9d 00 04 	lw ra,(sp+4)
     e60:	2b 8b 00 10 	lw r11,(sp+16)
     e64:	2b 8c 00 0c 	lw r12,(sp+12)
     e68:	2b 8d 00 08 	lw r13,(sp+8)
     e6c:	37 9c 00 10 	addi sp,sp,16
     e70:	c3 a0 00 00 	ret

00000e74 <printnumberRTC>:

// Imprime segundo o minuto
void printnumberRTC (char number)
{
     e74:	37 9c ff f8 	addi sp,sp,-8
     e78:	5b 8b 00 08 	sw (sp+8),r11
     e7c:	5b 9d 00 04 	sw (sp+4),ra
     e80:	20 2b 00 ff 	andi r11,r1,0xff
  char highnib;
  char lownib;
  highnib = number&0xF0;
  lownib = number&0x0F;
  
  writeCharlcd(asciiConv(highnib>>4));
     e84:	01 61 00 04 	srui r1,r11,4
     e88:	34 21 00 30 	addi r1,r1,48
     e8c:	fb ff fe 15 	calli 6e0 <writeCharlcd>
void printnumberRTC (char number)
{
  char highnib;
  char lownib;
  highnib = number&0xF0;
  lownib = number&0x0F;
     e90:	21 61 00 0f 	andi r1,r11,0xf
  
  writeCharlcd(asciiConv(highnib>>4));
  writeCharlcd(asciiConv(lownib));
     e94:	34 21 00 30 	addi r1,r1,48
     e98:	fb ff fe 12 	calli 6e0 <writeCharlcd>
} 
     e9c:	2b 9d 00 04 	lw ra,(sp+4)
     ea0:	2b 8b 00 08 	lw r11,(sp+8)
     ea4:	37 9c 00 08 	addi sp,sp,8
     ea8:	c3 a0 00 00 	ret

00000eac <printHourRTC>:

// Imprime hora
void printHourRTC (char number)
{
     eac:	37 9c ff f8 	addi sp,sp,-8
     eb0:	5b 8b 00 08 	sw (sp+8),r11
     eb4:	5b 9d 00 04 	sw (sp+4),ra
     eb8:	20 2b 00 ff 	andi r11,r1,0xff
  char highnib;
  char lownib;
  highnib = number&0x10;
     ebc:	21 61 00 10 	andi r1,r11,0x10
  lownib = number&0x0F;
  
  writeCharlcd(asciiConv(highnib>>4));
     ec0:	00 21 00 04 	srui r1,r1,4
     ec4:	34 21 00 30 	addi r1,r1,48
     ec8:	fb ff fe 06 	calli 6e0 <writeCharlcd>
void printHourRTC (char number)
{
  char highnib;
  char lownib;
  highnib = number&0x10;
  lownib = number&0x0F;
     ecc:	21 61 00 0f 	andi r1,r11,0xf
  
  writeCharlcd(asciiConv(highnib>>4));
  writeCharlcd(asciiConv(lownib));
     ed0:	34 21 00 30 	addi r1,r1,48
     ed4:	fb ff fe 03 	calli 6e0 <writeCharlcd>
} 
     ed8:	2b 9d 00 04 	lw ra,(sp+4)
     edc:	2b 8b 00 08 	lw r11,(sp+8)
     ee0:	37 9c 00 08 	addi sp,sp,8
     ee4:	c3 a0 00 00 	ret

00000ee8 <writeint>:



//----------------------------------------------------------------------------
inline void writeint(uint32_t val)
{
     ee8:	37 9c ff f0 	addi sp,sp,-16
     eec:	5b 8b 00 10 	sw (sp+16),r11
     ef0:	5b 8c 00 0c 	sw (sp+12),r12
     ef4:	5b 8d 00 08 	sw (sp+8),r13
     ef8:	5b 9d 00 04 	sw (sp+4),ra
     efc:	34 0b 00 08 	mvi r11,8
     f00:	b8 20 60 00 	mv r12,r1
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
     f04:	34 0d 00 09 	mvi r13,9
     f08:	e0 00 00 02 	bi f10 <writeint+0x28>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
     f0c:	3d 8c 00 04 	sli r12,r12,4
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
     f10:	01 82 00 1c 	srui r2,r12,28
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
     f14:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
     f18:	51 a2 00 0a 	bgeu r13,r2,f40 <writeint+0x58>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
     f1c:	35 6b ff ff 	addi r11,r11,-1
     f20:	f8 00 02 89 	calli 1944 <uart_putchar>
//----------------------------------------------------------------------------
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
     f24:	5d 60 ff fa 	bne r11,r0,f0c <writeint+0x24>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
	}
}
     f28:	2b 9d 00 04 	lw ra,(sp+4)
     f2c:	2b 8b 00 10 	lw r11,(sp+16)
     f30:	2b 8c 00 0c 	lw r12,(sp+12)
     f34:	2b 8d 00 08 	lw r13,(sp+8)
     f38:	37 9c 00 10 	addi sp,sp,16
     f3c:	c3 a0 00 00 	ret
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
     f40:	34 41 00 30 	addi r1,r2,48
     f44:	e3 ff ff f6 	bi f1c <writeint+0x34>

00000f48 <test2>:
		val <<= 4;
	}
}

void test2() {
     f48:	37 9c ff fc 	addi sp,sp,-4
     f4c:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar('b');   
     f50:	34 01 00 62 	mvi r1,98
     f54:	f8 00 02 7c 	calli 1944 <uart_putchar>
}
     f58:	2b 9d 00 04 	lw ra,(sp+4)
     f5c:	37 9c 00 04 	addi sp,sp,4
     f60:	c3 a0 00 00 	ret

00000f64 <test>:

void test() {
     f64:	37 9c ff fc 	addi sp,sp,-4
     f68:	5b 9d 00 04 	sw (sp+4),ra
    uart_putchar('a');
     f6c:	34 01 00 61 	mvi r1,97
     f70:	f8 00 02 75 	calli 1944 <uart_putchar>
    test2();
     f74:	fb ff ff f5 	calli f48 <test2>
    uart_putchar('c');
     f78:	34 01 00 63 	mvi r1,99
     f7c:	f8 00 02 72 	calli 1944 <uart_putchar>
} 
     f80:	2b 9d 00 04 	lw ra,(sp+4)
     f84:	37 9c 00 04 	addi sp,sp,4
     f88:	c3 a0 00 00 	ret

00000f8c <key_read_num>:

//---------------------------------------------------------------------------
// Keyboard functions
//---------------------------------------------------------------------------

uint32_t key_read_num(int val){
     f8c:	37 9c ff b4 	addi sp,sp,-76
     f90:	5b 8b 00 44 	sw (sp+68),r11
     f94:	5b 8c 00 40 	sw (sp+64),r12
     f98:	5b 8d 00 3c 	sw (sp+60),r13
     f9c:	5b 8e 00 38 	sw (sp+56),r14
     fa0:	5b 8f 00 34 	sw (sp+52),r15
     fa4:	5b 90 00 30 	sw (sp+48),r16
     fa8:	5b 91 00 2c 	sw (sp+44),r17
     fac:	5b 92 00 28 	sw (sp+40),r18
     fb0:	5b 93 00 24 	sw (sp+36),r19
     fb4:	5b 94 00 20 	sw (sp+32),r20
     fb8:	5b 95 00 1c 	sw (sp+28),r21
     fbc:	5b 96 00 18 	sw (sp+24),r22
     fc0:	5b 97 00 14 	sw (sp+20),r23
     fc4:	5b 98 00 10 	sw (sp+16),r24
     fc8:	5b 99 00 0c 	sw (sp+12),r25
     fcc:	5b 9b 00 08 	sw (sp+8),fp
     fd0:	5b 9d 00 04 	sw (sp+4),ra

	int case1 = 1;
     fd4:	34 0b 00 01 	mvi r11,1

//---------------------------------------------------------------------------
// Keyboard functions
//---------------------------------------------------------------------------

uint32_t key_read_num(int val){
     fd8:	b8 20 b8 00 	mv r23,r1
		temp1 = bandera1;
		temp2 = bandera2;
		temp3 = bandera3;
		temp4 = bandera4;
		
		switch (case1){
     fdc:	34 0f 00 02 	mvi r15,2
	int bandera1 = 0;
	int bandera2 = 0;
	int bandera3 = 0;
	int bandera4 = 0;

	int cont = 0;
     fe0:	34 1b 00 00 	mvi fp,0

	for(i = 2 ; i>1; i++){
//==========================================================================================//
//=============================== key matricial ============================================//

		msleep(1);
     fe4:	34 01 00 01 	mvi r1,1
	int temp7 = 0;
	int temp8 = 0;

	uint32_t i;
        uint32_t data1 = 0;
	uint32_t data2 = 0;
     fe8:	5b 80 00 4c 	sw (sp+76),r0
	int temp6 = 0;
	int temp7 = 0;
	int temp8 = 0;

	uint32_t i;
        uint32_t data1 = 0;
     fec:	5b 80 00 48 	sw (sp+72),r0
	uint32_t data2 = 0;

	for(i = 2 ; i>1; i++){
     ff0:	34 0d 00 02 	mvi r13,2
	uint32_t clave = 0;

	int bandera1 = 0;
	int bandera2 = 0;
	int bandera3 = 0;
	int bandera4 = 0;
     ff4:	34 16 00 00 	mvi r22,0
	uint32_t dato = 0;
	uint32_t clave = 0;

	int bandera1 = 0;
	int bandera2 = 0;
	int bandera3 = 0;
     ff8:	34 15 00 00 	mvi r21,0
	int case2 = 1;
	uint32_t dato = 0;
	uint32_t clave = 0;

	int bandera1 = 0;
	int bandera2 = 0;
     ffc:	34 11 00 00 	mvi r17,0
	int case1 = 1;
	int case2 = 1;
	uint32_t dato = 0;
	uint32_t clave = 0;

	int bandera1 = 0;
    1000:	34 0e 00 00 	mvi r14,0
uint32_t key_read_num(int val){

	int case1 = 1;
	int case2 = 1;
	uint32_t dato = 0;
	uint32_t clave = 0;
    1004:	34 19 00 00 	mvi r25,0

uint32_t key_read_num(int val){

	int case1 = 1;
	int case2 = 1;
	uint32_t dato = 0;
    1008:	34 13 00 00 	mvi r19,0
				}
				break;
    			case 2: write_fila(2);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    100c:	34 18 00 04 	mvi r24,4

	for(i = 2 ; i>1; i++){
//==========================================================================================//
//=============================== key matricial ============================================//

		msleep(1);
    1010:	f8 00 01 c6 	calli 1728 <msleep>
		temp1 = bandera1;
		temp2 = bandera2;
		temp3 = bandera3;
		temp4 = bandera4;
		
		switch (case1){
    1014:	45 6f 00 3b 	be r11,r15,1100 <_RAM_END+0x100>
    1018:	49 6f 00 7c 	bg r11,r15,1208 <_RAM_END+0x208>
    101c:	34 01 00 01 	mvi r1,1
    1020:	45 61 00 99 	be r11,r1,1284 <_RAM_END+0x284>
					default:	dato = dato;
							bandera4 = 0;
							break;
				}
				break;
			default:	write_fila(0);
    1024:	34 01 00 00 	mvi r1,0
    1028:	f8 00 02 b6 	calli 1b00 <write_fila>
					break;
    102c:	ba c0 a0 00 	mv r20,r22
    1030:	ba a0 90 00 	mv r18,r21
    1034:	ba 20 80 00 	mv r16,r17
    1038:	b9 c0 60 00 	mv r12,r14
		temp5 = bandera1;
		temp6 = bandera2;
		temp7 = bandera3;
		temp8 = bandera4;

		if (val == 0){
    103c:	5e e0 00 3f 	bne r23,r0,1138 <_RAM_END+0x138>

			if ((temp1 == 0 && temp5 == 0)||(temp1 == 1 && temp5 == 1)||(temp2 == 0 && temp6 == 0)||(temp2 == 1 && temp6 == 1)||(temp3 == 0 && temp7 == 0)||(temp3 == 1 && temp7 == 1)||(temp4 == 0 && temp8 == 0)||(temp4 == 1 && temp8 == 1)){

			}
			if((temp1 == 0 && temp5 == 1)||(temp2 == 0 && temp6 == 1)||(temp3 == 0 && temp7 == 1)||(temp4 == 0 && temp8 == 1)){
    1040:	65 ce 00 00 	cmpei r14,r14,0
    1044:	a1 8e 70 00 	and r14,r12,r14
    1048:	5d d7 00 0d 	bne r14,r23,107c <_RAM_END+0x7c>
    104c:	66 01 00 01 	cmpei r1,r16,1
    1050:	66 31 00 00 	cmpei r17,r17,0
    1054:	a0 31 88 00 	and r17,r1,r17
    1058:	5e 20 00 09 	bne r17,r0,107c <_RAM_END+0x7c>
    105c:	66 41 00 01 	cmpei r1,r18,1
    1060:	66 b5 00 00 	cmpei r21,r21,0
    1064:	a0 35 a8 00 	and r21,r1,r21
    1068:	5e a0 00 05 	bne r21,r0,107c <_RAM_END+0x7c>
    106c:	66 81 00 01 	cmpei r1,r20,1
    1070:	66 d6 00 00 	cmpei r22,r22,0
    1074:	a0 36 b0 00 	and r22,r1,r22
    1078:	46 c0 00 62 	be r22,r0,1200 <_RAM_END+0x200>
    107c:	ba 60 c8 00 	mv r25,r19
    1080:	34 0d 00 01 	mvi r13,1
				}
			}	

		}
		
		if (case1 == 4){
    1084:	45 78 00 59 	be r11,r24,11e8 <_RAM_END+0x1e8>
    1088:	35 6b 00 01 	addi r11,r11,1

	uint32_t i;
        uint32_t data1 = 0;
	uint32_t data2 = 0;

	for(i = 2 ; i>1; i++){
    108c:	34 02 00 01 	mvi r2,1
    1090:	55 a2 00 15 	bgu r13,r2,10e4 <_RAM_END+0xe4>
		}

		case1 = case1 + 1;
	}
	return clave;
}
    1094:	bb 20 08 00 	mv r1,r25
    1098:	2b 9d 00 04 	lw ra,(sp+4)
    109c:	2b 8b 00 44 	lw r11,(sp+68)
    10a0:	2b 8c 00 40 	lw r12,(sp+64)
    10a4:	2b 8d 00 3c 	lw r13,(sp+60)
    10a8:	2b 8e 00 38 	lw r14,(sp+56)
    10ac:	2b 8f 00 34 	lw r15,(sp+52)
    10b0:	2b 90 00 30 	lw r16,(sp+48)
    10b4:	2b 91 00 2c 	lw r17,(sp+44)
    10b8:	2b 92 00 28 	lw r18,(sp+40)
    10bc:	2b 93 00 24 	lw r19,(sp+36)
    10c0:	2b 94 00 20 	lw r20,(sp+32)
    10c4:	2b 95 00 1c 	lw r21,(sp+28)
    10c8:	2b 96 00 18 	lw r22,(sp+24)
    10cc:	2b 97 00 14 	lw r23,(sp+20)
    10d0:	2b 98 00 10 	lw r24,(sp+16)
    10d4:	2b 99 00 0c 	lw r25,(sp+12)
    10d8:	2b 9b 00 08 	lw fp,(sp+8)
    10dc:	37 9c 00 4c 	addi sp,sp,76
    10e0:	c3 a0 00 00 	ret

	for(i = 2 ; i>1; i++){
//==========================================================================================//
//=============================== key matricial ============================================//

		msleep(1);
    10e4:	34 01 00 01 	mvi r1,1

	uint32_t i;
        uint32_t data1 = 0;
	uint32_t data2 = 0;

	for(i = 2 ; i>1; i++){
    10e8:	ba 80 b0 00 	mv r22,r20
    10ec:	ba 40 a8 00 	mv r21,r18
    10f0:	ba 00 88 00 	mv r17,r16
    10f4:	b9 80 70 00 	mv r14,r12
//==========================================================================================//
//=============================== key matricial ============================================//

		msleep(1);
    10f8:	f8 00 01 8c 	calli 1728 <msleep>
		temp1 = bandera1;
		temp2 = bandera2;
		temp3 = bandera3;
		temp4 = bandera4;
		
		switch (case1){
    10fc:	5d 6f ff c7 	bne r11,r15,1018 <_RAM_END+0x18>
					default:	dato = dato;
							bandera1 = 0;
							break;
				}
				break;
    			case 2: write_fila(2);
    1100:	34 01 00 02 	mvi r1,2
    1104:	f8 00 02 7f 	calli 1b00 <write_fila>
				msleep(1);
    1108:	34 01 00 01 	mvi r1,1
    110c:	f8 00 01 87 	calli 1728 <msleep>
				case2 = read_columna();
    1110:	f8 00 02 ba 	calli 1bf8 <read_columna>
				switch (case2){
    1114:	44 2b 00 cf 	be r1,r11,1450 <_RAM_END+0x450>
    1118:	54 2b 00 83 	bgu r1,r11,1324 <_RAM_END+0x324>
    111c:	34 02 00 01 	mvi r2,1
    1120:	44 22 00 c6 	be r1,r2,1438 <_RAM_END+0x438>
			    		case 8: dato = 0;
						bandera2 = 1;
						break;
					default:	dato = dato;
							bandera2 = 0;
							break;
    1124:	ba c0 a0 00 	mv r20,r22
    1128:	ba a0 90 00 	mv r18,r21
    112c:	b9 c0 60 00 	mv r12,r14
						break;
			    		case 8: dato = 0;
						bandera2 = 1;
						break;
					default:	dato = dato;
							bandera2 = 0;
    1130:	34 10 00 00 	mvi r16,0
		temp5 = bandera1;
		temp6 = bandera2;
		temp7 = bandera3;
		temp8 = bandera4;

		if (val == 0){
    1134:	46 e0 ff c3 	be r23,r0,1040 <_RAM_END+0x40>
			
			
		}

		
		if (val == 1) {
    1138:	34 01 00 01 	mvi r1,1
    113c:	5e e1 00 31 	bne r23,r1,1200 <_RAM_END+0x200>

			if ((temp1 == 0 && temp5 == 0)||(temp1 == 1 && temp5 == 1)||(temp2 == 0 && temp6 == 0)||(temp2 == 1 && temp6 == 1)||(temp3 == 0 && temp7 == 0)||(temp3 == 1 && temp7 == 1)||(temp4 == 0 && temp8 == 0)||(temp4 == 1 && temp8 == 1)){

			}
			if((temp1 == 0 && temp5 == 1)||(temp2 == 0 && temp6 == 1)||(temp3 == 0 && temp7 == 1)||(temp4 == 0 && temp8 == 1)){
    1140:	65 ce 00 00 	cmpei r14,r14,0
    1144:	a1 8e 70 00 	and r14,r12,r14
    1148:	5d c0 00 09 	bne r14,r0,116c <_RAM_END+0x16c>
    114c:	66 01 00 01 	cmpei r1,r16,1
    1150:	66 31 00 00 	cmpei r17,r17,0
    1154:	a0 31 88 00 	and r17,r1,r17
    1158:	5e 2e 00 05 	bne r17,r14,116c <_RAM_END+0x16c>
    115c:	66 41 00 01 	cmpei r1,r18,1
    1160:	66 b5 00 00 	cmpei r21,r21,0
    1164:	a0 35 a8 00 	and r21,r1,r21
    1168:	46 b1 00 22 	be r21,r17,11f0 <_RAM_END+0x1f0>

				if((dato == 14)||(dato == 15)||(dato == 10)||(dato == 11)){
    116c:	36 62 ff f2 	addi r2,r19,-14
    1170:	34 01 00 01 	mvi r1,1
    1174:	f0 22 10 00 	cmpgeu r2,r1,r2
    1178:	66 63 00 0a 	cmpei r3,r19,10
    117c:	b8 43 10 00 	or r2,r2,r3
    1180:	5c 40 00 20 	bne r2,r0,1200 <_RAM_END+0x200>
    1184:	34 02 00 0b 	mvi r2,11
    1188:	46 62 00 1e 	be r19,r2,1200 <_RAM_END+0x200>
				
				}
				else{
					if(dato == 12){
    118c:	34 02 00 0c 	mvi r2,12
    1190:	46 62 00 b6 	be r19,r2,1468 <_RAM_END+0x468>
						msleep(10);
						i = 0;
						cont = 3;
						
					}
					if(dato == 13){
    1194:	34 02 00 0d 	mvi r2,13
    1198:	46 62 00 bb 	be r19,r2,1484 <_RAM_END+0x484>
						msleep(500);
						cont = -1;
										
					}
	
					cont = cont + 1;
    119c:	37 7b 00 01 	addi fp,fp,1

					if (cont == 1){
    11a0:	47 61 00 c5 	be fp,r1,14b4 <_RAM_END+0x4b4>
						data1 = dato;
						displayAddress(6,1);
						printnumberlcd(data1);
						msleep(500);
    11a4:	35 ad 00 01 	addi r13,r13,1
					}
					if (cont == 2){
    11a8:	5f 6f ff b7 	bne fp,r15,1084 <_RAM_END+0x84>
						data2 = dato + 10*data1;
    11ac:	2b 81 00 48 	lw r1,(sp+72)
    11b0:	3c 22 00 03 	sli r2,r1,3
    11b4:	3c 23 00 01 	sli r3,r1,1
						displayAddress(6,1);
    11b8:	34 01 00 06 	mvi r1,6
						displayAddress(6,1);
						printnumberlcd(data1);
						msleep(500);
					}
					if (cont == 2){
						data2 = dato + 10*data1;
    11bc:	b4 62 18 00 	add r3,r3,r2
    11c0:	b6 63 18 00 	add r3,r19,r3
						displayAddress(6,1);
    11c4:	34 02 00 01 	mvi r2,1
						displayAddress(6,1);
						printnumberlcd(data1);
						msleep(500);
					}
					if (cont == 2){
						data2 = dato + 10*data1;
    11c8:	5b 83 00 4c 	sw (sp+76),r3
						displayAddress(6,1);
    11cc:	fb ff fe 10 	calli a0c <displayAddress>
						printnumberlcd(data2);
    11d0:	2b 82 00 4c 	lw r2,(sp+76)
    11d4:	20 41 00 ff 	andi r1,r2,0xff
    11d8:	fb ff ff 09 	calli dfc <printnumberlcd>
						//i = 0;
						msleep(500);
    11dc:	34 01 01 f4 	mvi r1,500
    11e0:	f8 00 01 52 	calli 1728 <msleep>
				}
			}	

		}
		
		if (case1 == 4){
    11e4:	5d 78 ff a9 	bne r11,r24,1088 <_RAM_END+0x88>
    11e8:	34 0b 00 01 	mvi r11,1
    11ec:	e3 ff ff a8 	bi 108c <_RAM_END+0x8c>
		if (val == 1) {

			if ((temp1 == 0 && temp5 == 0)||(temp1 == 1 && temp5 == 1)||(temp2 == 0 && temp6 == 0)||(temp2 == 1 && temp6 == 1)||(temp3 == 0 && temp7 == 0)||(temp3 == 1 && temp7 == 1)||(temp4 == 0 && temp8 == 0)||(temp4 == 1 && temp8 == 1)){

			}
			if((temp1 == 0 && temp5 == 1)||(temp2 == 0 && temp6 == 1)||(temp3 == 0 && temp7 == 1)||(temp4 == 0 && temp8 == 1)){
    11f0:	66 81 00 01 	cmpei r1,r20,1
    11f4:	66 d6 00 00 	cmpei r22,r22,0
    11f8:	a0 36 b0 00 	and r22,r1,r22
    11fc:	5e d5 ff dc 	bne r22,r21,116c <_RAM_END+0x16c>

				if((dato == 14)||(dato == 15)||(dato == 10)||(dato == 11)){
    1200:	35 ad 00 01 	addi r13,r13,1
    1204:	e3 ff ff a0 	bi 1084 <_RAM_END+0x84>
		temp1 = bandera1;
		temp2 = bandera2;
		temp3 = bandera3;
		temp4 = bandera4;
		
		switch (case1){
    1208:	34 01 00 03 	mvi r1,3
    120c:	45 61 00 10 	be r11,r1,124c <_RAM_END+0x24c>
    1210:	5d 78 ff 85 	bne r11,r24,1024 <_RAM_END+0x24>
					default:	dato = dato;
							bandera3 = 0;
							break;
				}
				break;
    			case 4:	write_fila(8);
    1214:	34 01 00 08 	mvi r1,8
    1218:	f8 00 02 3a 	calli 1b00 <write_fila>
				msleep(1);
    121c:	34 01 00 01 	mvi r1,1
    1220:	f8 00 01 42 	calli 1728 <msleep>
				case2 = read_columna();
    1224:	f8 00 02 75 	calli 1bf8 <read_columna>
				switch (case2){
    1228:	44 2f 00 5a 	be r1,r15,1390 <_RAM_END+0x390>
    122c:	54 2f 00 35 	bgu r1,r15,1300 <_RAM_END+0x300>
    1230:	34 02 00 01 	mvi r2,1
    1234:	44 22 00 51 	be r1,r2,1378 <_RAM_END+0x378>
			    		case 8: dato = 15;
						bandera4 = 1;
						break;
					default:	dato = dato;
							bandera4 = 0;
							break;
    1238:	ba a0 90 00 	mv r18,r21
    123c:	ba 20 80 00 	mv r16,r17
    1240:	b9 c0 60 00 	mv r12,r14
						break;
			    		case 8: dato = 15;
						bandera4 = 1;
						break;
					default:	dato = dato;
							bandera4 = 0;
    1244:	34 14 00 00 	mvi r20,0
							break;
    1248:	e3 ff ff 7d 	bi 103c <_RAM_END+0x3c>
					default:	dato = dato;
							bandera2 = 0;
							break;
				}
				break;
	    		case 3:	write_fila(4);
    124c:	34 01 00 04 	mvi r1,4
    1250:	f8 00 02 2c 	calli 1b00 <write_fila>
				msleep(1);
    1254:	34 01 00 01 	mvi r1,1
    1258:	f8 00 01 34 	calli 1728 <msleep>
				case2 = read_columna();
    125c:	f8 00 02 67 	calli 1bf8 <read_columna>
				switch (case2){
    1260:	44 2f 00 40 	be r1,r15,1360 <_RAM_END+0x360>
    1264:	54 2f 00 15 	bgu r1,r15,12b8 <_RAM_END+0x2b8>
    1268:	34 02 00 01 	mvi r2,1
    126c:	44 22 00 37 	be r1,r2,1348 <_RAM_END+0x348>
		    			case 8: dato = 11;
						bandera3 = 1;
						break;
					default:	dato = dato;
							bandera3 = 0;
							break;
    1270:	ba c0 a0 00 	mv r20,r22
    1274:	ba 20 80 00 	mv r16,r17
    1278:	b9 c0 60 00 	mv r12,r14
						break;
		    			case 8: dato = 11;
						bandera3 = 1;
						break;
					default:	dato = dato;
							bandera3 = 0;
    127c:	34 12 00 00 	mvi r18,0
							break;
    1280:	e3 ff ff 6f 	bi 103c <_RAM_END+0x3c>
		temp2 = bandera2;
		temp3 = bandera3;
		temp4 = bandera4;
		
		switch (case1){
    			case 1:	write_fila(1);
    1284:	34 01 00 01 	mvi r1,1
    1288:	f8 00 02 1e 	calli 1b00 <write_fila>
				msleep(1);
    128c:	34 01 00 01 	mvi r1,1
    1290:	f8 00 01 26 	calli 1728 <msleep>
				case2 = read_columna();
    1294:	f8 00 02 59 	calli 1bf8 <read_columna>
				switch (case2){
    1298:	44 2f 00 62 	be r1,r15,1420 <_RAM_END+0x420>
    129c:	54 2f 00 10 	bgu r1,r15,12dc <_RAM_END+0x2dc>
    12a0:	44 2b 00 5a 	be r1,r11,1408 <_RAM_END+0x408>
		    			case 8: dato = 10;
						bandera1 = 1;
						break;
					default:	dato = dato;
							bandera1 = 0;
							break;
    12a4:	ba c0 a0 00 	mv r20,r22
    12a8:	ba a0 90 00 	mv r18,r21
    12ac:	ba 20 80 00 	mv r16,r17
						break;
		    			case 8: dato = 10;
						bandera1 = 1;
						break;
					default:	dato = dato;
							bandera1 = 0;
    12b0:	34 0c 00 00 	mvi r12,0
							break;
    12b4:	e3 ff ff 62 	bi 103c <_RAM_END+0x3c>
				}
				break;
	    		case 3:	write_fila(4);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    12b8:	44 38 00 42 	be r1,r24,13c0 <_RAM_END+0x3c0>
    12bc:	34 02 00 08 	mvi r2,8
    12c0:	5c 22 ff ec 	bne r1,r2,1270 <_RAM_END+0x270>
			    		case 4:	dato = 9;
						bandera3 = 1;
						break;
		    			case 8: dato = 11;
						bandera3 = 1;
						break;
    12c4:	ba c0 a0 00 	mv r20,r22
    12c8:	ba 20 80 00 	mv r16,r17
    12cc:	b9 c0 60 00 	mv r12,r14
						break;
			    		case 4:	dato = 9;
						bandera3 = 1;
						break;
		    			case 8: dato = 11;
						bandera3 = 1;
    12d0:	34 12 00 01 	mvi r18,1
						bandera3 = 1;
						break;
			    		case 4:	dato = 9;
						bandera3 = 1;
						break;
		    			case 8: dato = 11;
    12d4:	34 13 00 0b 	mvi r19,11
						bandera3 = 1;
						break;
    12d8:	e3 ff ff 59 	bi 103c <_RAM_END+0x3c>
		
		switch (case1){
    			case 1:	write_fila(1);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    12dc:	44 38 00 33 	be r1,r24,13a8 <_RAM_END+0x3a8>
    12e0:	34 02 00 08 	mvi r2,8
    12e4:	5c 22 ff f0 	bne r1,r2,12a4 <_RAM_END+0x2a4>
			    		case 4:	dato = 7;
						bandera1 = 1;
						break;
		    			case 8: dato = 10;
						bandera1 = 1;
						break;
    12e8:	ba c0 a0 00 	mv r20,r22
    12ec:	ba a0 90 00 	mv r18,r21
    12f0:	ba 20 80 00 	mv r16,r17
						break;
			    		case 4:	dato = 7;
						bandera1 = 1;
						break;
		    			case 8: dato = 10;
						bandera1 = 1;
    12f4:	34 0c 00 01 	mvi r12,1
						bandera1 = 1;
						break;
			    		case 4:	dato = 7;
						bandera1 = 1;
						break;
		    			case 8: dato = 10;
    12f8:	34 13 00 0a 	mvi r19,10
						bandera1 = 1;
						break;
    12fc:	e3 ff ff 50 	bi 103c <_RAM_END+0x3c>
				}
				break;
    			case 4:	write_fila(8);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    1300:	44 2b 00 3c 	be r1,r11,13f0 <_RAM_END+0x3f0>
    1304:	34 02 00 08 	mvi r2,8
    1308:	5c 22 ff cc 	bne r1,r2,1238 <_RAM_END+0x238>
		    			case 4:	dato = 14;
						bandera4 = 1;
						break;
			    		case 8: dato = 15;
						bandera4 = 1;
						break;
    130c:	ba a0 90 00 	mv r18,r21
    1310:	ba 20 80 00 	mv r16,r17
    1314:	b9 c0 60 00 	mv r12,r14
						break;
		    			case 4:	dato = 14;
						bandera4 = 1;
						break;
			    		case 8: dato = 15;
						bandera4 = 1;
    1318:	34 14 00 01 	mvi r20,1
						bandera4 = 1;
						break;
		    			case 4:	dato = 14;
						bandera4 = 1;
						break;
			    		case 8: dato = 15;
    131c:	34 13 00 0f 	mvi r19,15
						bandera4 = 1;
						break;
    1320:	e3 ff ff 47 	bi 103c <_RAM_END+0x3c>
				}
				break;
    			case 2: write_fila(2);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    1324:	44 38 00 2d 	be r1,r24,13d8 <_RAM_END+0x3d8>
    1328:	34 02 00 08 	mvi r2,8
    132c:	5c 22 ff 7e 	bne r1,r2,1124 <_RAM_END+0x124>
		    			case 4:	dato = 8;
						bandera2 = 1;
						break;
			    		case 8: dato = 0;
						bandera2 = 1;
						break;
    1330:	ba c0 a0 00 	mv r20,r22
    1334:	ba a0 90 00 	mv r18,r21
    1338:	b9 c0 60 00 	mv r12,r14
						break;
		    			case 4:	dato = 8;
						bandera2 = 1;
						break;
			    		case 8: dato = 0;
						bandera2 = 1;
    133c:	34 10 00 01 	mvi r16,1
						bandera2 = 1;
						break;
		    			case 4:	dato = 8;
						bandera2 = 1;
						break;
			    		case 8: dato = 0;
    1340:	34 13 00 00 	mvi r19,0
						bandera2 = 1;
						break;
    1344:	e3 ff ff 3e 	bi 103c <_RAM_END+0x3c>
				}
				break;
	    		case 3:	write_fila(4);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    1348:	ba c0 a0 00 	mv r20,r22
    134c:	ba 20 80 00 	mv r16,r17
    1350:	b9 c0 60 00 	mv r12,r14
	    				case 1:	dato = 3;
						bandera3 = 1;
    1354:	34 12 00 01 	mvi r18,1
				break;
	    		case 3:	write_fila(4);
				msleep(1);
				case2 = read_columna();
				switch (case2){
	    				case 1:	dato = 3;
    1358:	34 13 00 03 	mvi r19,3
    135c:	e3 ff ff 38 	bi 103c <_RAM_END+0x3c>
				}
				break;
	    		case 3:	write_fila(4);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    1360:	ba c0 a0 00 	mv r20,r22
    1364:	ba 20 80 00 	mv r16,r17
    1368:	b9 c0 60 00 	mv r12,r14
	    				case 1:	dato = 3;
						bandera3 = 1;
						break;
		    			case 2: dato = 6;
						bandera3 = 1;
    136c:	34 12 00 01 	mvi r18,1
				case2 = read_columna();
				switch (case2){
	    				case 1:	dato = 3;
						bandera3 = 1;
						break;
		    			case 2: dato = 6;
    1370:	34 13 00 06 	mvi r19,6
    1374:	e3 ff ff 32 	bi 103c <_RAM_END+0x3c>
				}
				break;
    			case 4:	write_fila(8);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    1378:	ba a0 90 00 	mv r18,r21
    137c:	ba 20 80 00 	mv r16,r17
    1380:	b9 c0 60 00 	mv r12,r14
	    				case 1:	dato = 12;
						bandera4 = 1;
    1384:	34 14 00 01 	mvi r20,1
				break;
    			case 4:	write_fila(8);
				msleep(1);
				case2 = read_columna();
				switch (case2){
	    				case 1:	dato = 12;
    1388:	34 13 00 0c 	mvi r19,12
    138c:	e3 ff ff 2c 	bi 103c <_RAM_END+0x3c>
				}
				break;
    			case 4:	write_fila(8);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    1390:	ba a0 90 00 	mv r18,r21
    1394:	ba 20 80 00 	mv r16,r17
    1398:	b9 c0 60 00 	mv r12,r14
	    				case 1:	dato = 12;
						bandera4 = 1;
						break;
			    		case 2: dato = 13;
						bandera4 = 1;
    139c:	34 14 00 01 	mvi r20,1
				case2 = read_columna();
				switch (case2){
	    				case 1:	dato = 12;
						bandera4 = 1;
						break;
			    		case 2: dato = 13;
    13a0:	34 13 00 0d 	mvi r19,13
    13a4:	e3 ff ff 26 	bi 103c <_RAM_END+0x3c>
		    			case 2: dato = 4;
						bandera1 = 1;
						break;
			    		case 4:	dato = 7;
						bandera1 = 1;
						break;
    13a8:	ba c0 a0 00 	mv r20,r22
    13ac:	ba a0 90 00 	mv r18,r21
    13b0:	ba 20 80 00 	mv r16,r17
						break;
		    			case 2: dato = 4;
						bandera1 = 1;
						break;
			    		case 4:	dato = 7;
						bandera1 = 1;
    13b4:	34 0c 00 01 	mvi r12,1
						bandera1 = 1;
						break;
		    			case 2: dato = 4;
						bandera1 = 1;
						break;
			    		case 4:	dato = 7;
    13b8:	34 13 00 07 	mvi r19,7
						bandera1 = 1;
						break;
    13bc:	e3 ff ff 20 	bi 103c <_RAM_END+0x3c>
		    			case 2: dato = 6;
						bandera3 = 1;
						break;
			    		case 4:	dato = 9;
						bandera3 = 1;
						break;
    13c0:	ba c0 a0 00 	mv r20,r22
    13c4:	ba 20 80 00 	mv r16,r17
    13c8:	b9 c0 60 00 	mv r12,r14
						break;
		    			case 2: dato = 6;
						bandera3 = 1;
						break;
			    		case 4:	dato = 9;
						bandera3 = 1;
    13cc:	34 12 00 01 	mvi r18,1
						bandera3 = 1;
						break;
		    			case 2: dato = 6;
						bandera3 = 1;
						break;
			    		case 4:	dato = 9;
    13d0:	34 13 00 09 	mvi r19,9
						bandera3 = 1;
						break;
    13d4:	e3 ff ff 1a 	bi 103c <_RAM_END+0x3c>
			    		case 2: dato = 5;
						bandera2 = 1;
						break;
		    			case 4:	dato = 8;
						bandera2 = 1;
						break;
    13d8:	ba c0 a0 00 	mv r20,r22
    13dc:	ba a0 90 00 	mv r18,r21
    13e0:	b9 c0 60 00 	mv r12,r14
						break;
			    		case 2: dato = 5;
						bandera2 = 1;
						break;
		    			case 4:	dato = 8;
						bandera2 = 1;
    13e4:	34 10 00 01 	mvi r16,1
						bandera2 = 1;
						break;
			    		case 2: dato = 5;
						bandera2 = 1;
						break;
		    			case 4:	dato = 8;
    13e8:	34 13 00 08 	mvi r19,8
						bandera2 = 1;
						break;
    13ec:	e3 ff ff 14 	bi 103c <_RAM_END+0x3c>
			    		case 2: dato = 13;
						bandera4 = 1;
						break;
		    			case 4:	dato = 14;
						bandera4 = 1;
						break;
    13f0:	ba a0 90 00 	mv r18,r21
    13f4:	ba 20 80 00 	mv r16,r17
    13f8:	b9 c0 60 00 	mv r12,r14
						break;
			    		case 2: dato = 13;
						bandera4 = 1;
						break;
		    			case 4:	dato = 14;
						bandera4 = 1;
    13fc:	34 14 00 01 	mvi r20,1
						bandera4 = 1;
						break;
			    		case 2: dato = 13;
						bandera4 = 1;
						break;
		    			case 4:	dato = 14;
    1400:	34 13 00 0e 	mvi r19,14
						bandera4 = 1;
						break;
    1404:	e3 ff ff 0e 	bi 103c <_RAM_END+0x3c>
		
		switch (case1){
    			case 1:	write_fila(1);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    1408:	ba c0 a0 00 	mv r20,r22
    140c:	ba a0 90 00 	mv r18,r21
    1410:	ba 20 80 00 	mv r16,r17
	   				case 1:	dato = 1;
						bandera1 = 1;
    1414:	34 0c 00 01 	mvi r12,1
		switch (case1){
    			case 1:	write_fila(1);
				msleep(1);
				case2 = read_columna();
				switch (case2){
	   				case 1:	dato = 1;
    1418:	34 13 00 01 	mvi r19,1
    141c:	e3 ff ff 08 	bi 103c <_RAM_END+0x3c>
		
		switch (case1){
    			case 1:	write_fila(1);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    1420:	ba c0 a0 00 	mv r20,r22
    1424:	ba a0 90 00 	mv r18,r21
    1428:	ba 20 80 00 	mv r16,r17
	   				case 1:	dato = 1;
						bandera1 = 1;
						break;
		    			case 2: dato = 4;
						bandera1 = 1;
    142c:	34 0c 00 01 	mvi r12,1
				case2 = read_columna();
				switch (case2){
	   				case 1:	dato = 1;
						bandera1 = 1;
						break;
		    			case 2: dato = 4;
    1430:	34 13 00 04 	mvi r19,4
    1434:	e3 ff ff 02 	bi 103c <_RAM_END+0x3c>
				}
				break;
    			case 2: write_fila(2);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    1438:	ba c0 a0 00 	mv r20,r22
    143c:	ba a0 90 00 	mv r18,r21
    1440:	b9 c0 60 00 	mv r12,r14
	    				case 1:	dato = 2;
						bandera2 = 1;
    1444:	34 10 00 01 	mvi r16,1
				break;
    			case 2: write_fila(2);
				msleep(1);
				case2 = read_columna();
				switch (case2){
	    				case 1:	dato = 2;
    1448:	34 13 00 02 	mvi r19,2
    144c:	e3 ff fe fc 	bi 103c <_RAM_END+0x3c>
				}
				break;
    			case 2: write_fila(2);
				msleep(1);
				case2 = read_columna();
				switch (case2){
    1450:	ba c0 a0 00 	mv r20,r22
    1454:	ba a0 90 00 	mv r18,r21
    1458:	b9 c0 60 00 	mv r12,r14
	    				case 1:	dato = 2;
						bandera2 = 1;
						break;
			    		case 2: dato = 5;
						bandera2 = 1;
    145c:	34 10 00 01 	mvi r16,1
				case2 = read_columna();
				switch (case2){
	    				case 1:	dato = 2;
						bandera2 = 1;
						break;
			    		case 2: dato = 5;
    1460:	34 13 00 05 	mvi r19,5
    1464:	e3 ff fe f6 	bi 103c <_RAM_END+0x3c>
				
				}
				else{
					if(dato == 12){
						clave = data2;
						clearDisplay();	
    1468:	fb ff fc f6 	calli 840 <clearDisplay>
						msleep(10);
    146c:	34 01 00 0a 	mvi r1,10
    1470:	f8 00 00 ae 	calli 1728 <msleep>
    1474:	34 0d 00 01 	mvi r13,1
    1478:	2b 99 00 4c 	lw r25,(sp+76)
						msleep(500);
						cont = -1;
										
					}
	
					cont = cont + 1;
    147c:	34 1b 00 04 	mvi fp,4
    1480:	e3 ff ff 01 	bi 1084 <_RAM_END+0x84>
					}
					if(dato == 13){
						
						data1 = 0;
						data2 = 0;						
						displayAddress(6,1);
    1484:	34 02 00 01 	mvi r2,1
    1488:	34 01 00 06 	mvi r1,6
    148c:	fb ff fd 60 	calli a0c <displayAddress>
						printnumberlcd(000);
    1490:	34 01 00 00 	mvi r1,0
    1494:	fb ff fe 5a 	calli dfc <printnumberlcd>
						msleep(500);
    1498:	34 01 01 f4 	mvi r1,500
    149c:	f8 00 00 a3 	calli 1728 <msleep>
    14a0:	35 ad 00 01 	addi r13,r13,1
						
					}
					if(dato == 13){
						
						data1 = 0;
						data2 = 0;						
    14a4:	5b 80 00 4c 	sw (sp+76),r0
						cont = 3;
						
					}
					if(dato == 13){
						
						data1 = 0;
    14a8:	5b 80 00 48 	sw (sp+72),r0
						msleep(500);
						cont = -1;
										
					}
	
					cont = cont + 1;
    14ac:	34 1b 00 00 	mvi fp,0
    14b0:	e3 ff fe f5 	bi 1084 <_RAM_END+0x84>

					if (cont == 1){
						data1 = dato;
						displayAddress(6,1);
    14b4:	34 02 00 01 	mvi r2,1
    14b8:	34 01 00 06 	mvi r1,6
    14bc:	fb ff fd 54 	calli a0c <displayAddress>
						printnumberlcd(data1);
    14c0:	ba 60 08 00 	mv r1,r19
    14c4:	fb ff fe 4e 	calli dfc <printnumberlcd>
						msleep(500);
    14c8:	34 01 01 f4 	mvi r1,500
    14cc:	f8 00 00 97 	calli 1728 <msleep>
    14d0:	35 ad 00 01 	addi r13,r13,1
    14d4:	5b 93 00 48 	sw (sp+72),r19
    14d8:	e3 ff fe eb 	bi 1084 <_RAM_END+0x84>

000014dc <validar>:
/*****************************************************************************************
VALIDAR TARJETA
++++++++++++++++++++++++++++++++++*/
void validar(){
	
}
    14dc:	c3 a0 00 00 	ret

000014e0 <main>:



int main()
{
    14e0:	37 9c ff e0 	addi sp,sp,-32
    14e4:	5b 8b 00 20 	sw (sp+32),r11
    14e8:	5b 8c 00 1c 	sw (sp+28),r12
    14ec:	5b 8d 00 18 	sw (sp+24),r13
    14f0:	5b 8e 00 14 	sw (sp+20),r14
    14f4:	5b 8f 00 10 	sw (sp+16),r15
    14f8:	5b 90 00 0c 	sw (sp+12),r16
    14fc:	5b 91 00 08 	sw (sp+8),r17
    1500:	5b 9d 00 04 	sw (sp+4),ra
	i2c_clockfreq(7);
    1504:	34 01 00 07 	mvi r1,7
    1508:	f8 00 02 08 	calli 1d28 <i2c_clockfreq>
	lcdInit();
    150c:	fb ff fd 59 	calli a70 <lcdInit>
	//displayAddress(0,0);
	//writeStringlcd("Validar tarjeta");
	msleep(50);
    1510:	34 01 00 32 	mvi r1,50
    1514:	f8 00 00 85 	calli 1728 <msleep>
	//clearDisplay();                  

	initRfidReader();
    1518:	fb ff fb 5f 	calli 294 <initRfidReader>
	
        //init_wifi();
        uart_putstr("AT+RST\r\n");
    151c:	78 01 00 00 	mvhi r1,0x0
    1520:	38 21 1e 24 	ori r1,r1,0x1e24
    1524:	f8 00 01 11 	calli 1968 <uart_putstr>
        msleep(500);
    1528:	34 01 01 f4 	mvi r1,500
    152c:	f8 00 00 7f 	calli 1728 <msleep>
        uart_putstr("AT+CIPMUX=1\r\n");
    1530:	78 01 00 00 	mvhi r1,0x0
    1534:	38 21 1e 30 	ori r1,r1,0x1e30
    1538:	f8 00 01 0c 	calli 1968 <uart_putstr>
        msleep(500);
    153c:	34 01 01 f4 	mvi r1,500
    1540:	f8 00 00 7a 	calli 1728 <msleep>
        uart_putstr("AT+CIPSERVER=1,80\r\n");
    1544:	78 01 00 00 	mvhi r1,0x0
    1548:	38 21 1e 40 	ori r1,r1,0x1e40
    154c:	f8 00 01 07 	calli 1968 <uart_putstr>
        msleep(500);
    1550:	34 01 01 f4 	mvi r1,500
    1554:	f8 00 00 75 	calli 1728 <msleep>
        uart_putstr("AT+CWSAP=\"PUERTA_RAPIDA\",\"987654321\",11,4\r\n");
    1558:	78 01 00 00 	mvhi r1,0x0
    155c:	38 21 1e 54 	ori r1,r1,0x1e54
    1560:	f8 00 01 02 	calli 1968 <uart_putstr>
        msleep(500);
    1564:	34 01 01 f4 	mvi r1,500
    1568:	78 0c 00 00 	mvhi r12,0x0
    156c:	78 0e 00 00 	mvhi r14,0x0
    1570:	78 11 00 00 	mvhi r17,0x0
    1574:	78 0f 00 00 	mvhi r15,0x0
    1578:	f8 00 00 6c 	calli 1728 <msleep>
    157c:	39 8c 1e 80 	ori r12,r12,0x1e80
    1580:	39 ce 1e 90 	ori r14,r14,0x1e90
    1584:	3a 31 1e 9c 	ori r17,r17,0x1e9c
    1588:	39 ef 1e a8 	ori r15,r15,0x1ea8
                writeStringlcd("Validar tarjeta");
                msleep(50);
                user=loop();

		//n=wifi_getchar();
		if(user !='x')
    158c:	34 0d 00 78 	mvi r13,120
                        msleep(50);
			displayAddress(0,0);
			writeStringlcd("Validando");
			
//			user=loop();
			if (user=='n'){
    1590:	34 10 00 6e 	mvi r16,110
        
        char n, user;
        
        while(1)
	{
		displayAddress(0,0);
    1594:	34 02 00 00 	mvi r2,0
    1598:	34 01 00 00 	mvi r1,0
    159c:	fb ff fd 1c 	calli a0c <displayAddress>
                writeStringlcd("Validar tarjeta");
    15a0:	b9 80 08 00 	mv r1,r12
    15a4:	fb ff fc 99 	calli 808 <writeStringlcd>
                msleep(50);
    15a8:	34 01 00 32 	mvi r1,50
    15ac:	f8 00 00 5f 	calli 1728 <msleep>
                user=loop();
    15b0:	fb ff fb 5a 	calli 318 <loop>
    15b4:	20 2b 00 ff 	andi r11,r1,0xff

		//n=wifi_getchar();
		if(user !='x')
    15b8:	45 6d ff f7 	be r11,r13,1594 <main+0xb4>
			/*uart_putstr("Valid Command, begin loop");
			uart_putstr("\n\r");
			user=loop();
			uart_putchar(user);
			*/
			clearDisplay();
    15bc:	fb ff fc a1 	calli 840 <clearDisplay>
                        msleep(50);
    15c0:	34 01 00 32 	mvi r1,50
    15c4:	f8 00 00 59 	calli 1728 <msleep>
			displayAddress(0,0);
    15c8:	34 01 00 00 	mvi r1,0
    15cc:	34 02 00 00 	mvi r2,0
    15d0:	fb ff fd 0f 	calli a0c <displayAddress>
			writeStringlcd("Validando");
    15d4:	b9 c0 08 00 	mv r1,r14
    15d8:	fb ff fc 8c 	calli 808 <writeStringlcd>
			
//			user=loop();
			if (user=='n'){
    15dc:	45 70 00 0f 	be r11,r16,1618 <main+0x138>
	
			else
				{
				//uart_putstr("Invalid command");
				//uart_putstr("\n\r");
				clearDisplay();
    15e0:	fb ff fc 98 	calli 840 <clearDisplay>
                                msleep(50);
    15e4:	34 01 00 32 	mvi r1,50
    15e8:	f8 00 00 50 	calli 1728 <msleep>
				displayAddress(0,0);
    15ec:	34 01 00 00 	mvi r1,0
    15f0:	34 02 00 00 	mvi r2,0
    15f4:	fb ff fd 06 	calli a0c <displayAddress>
				writeStringlcd("Denegado");
    15f8:	b9 e0 08 00 	mv r1,r15
    15fc:	fb ff fc 83 	calli 808 <writeStringlcd>
				msleep(3000);
    1600:	34 01 0b b8 	mvi r1,3000
    1604:	f8 00 00 49 	calli 1728 <msleep>
                                clearDisplay();
    1608:	fb ff fc 8e 	calli 840 <clearDisplay>
                                msleep(50);
    160c:	34 01 00 32 	mvi r1,50
    1610:	f8 00 00 46 	calli 1728 <msleep>
    1614:	e3 ff ff e0 	bi 1594 <main+0xb4>
			displayAddress(0,0);
			writeStringlcd("Validando");
			
//			user=loop();
			if (user=='n'){
					clearDisplay();
    1618:	fb ff fc 8a 	calli 840 <clearDisplay>
                                        msleep(50);
    161c:	34 01 00 32 	mvi r1,50
    1620:	f8 00 00 42 	calli 1728 <msleep>
					displayAddress(0,0);
    1624:	34 01 00 00 	mvi r1,0
    1628:	34 02 00 00 	mvi r2,0
    162c:	fb ff fc f8 	calli a0c <displayAddress>
					writeStringlcd("Permitido");
    1630:	ba 20 08 00 	mv r1,r17
    1634:	e3 ff ff f2 	bi 15fc <main+0x11c>

00001638 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
    1638:	c3 a0 00 00 	ret

0000163c <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
    163c:	78 01 00 00 	mvhi r1,0x0
    1640:	38 21 1f 84 	ori r1,r1,0x1f84
    1644:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
    1648:	78 02 00 00 	mvhi r2,0x0
    164c:	38 42 1e f8 	ori r2,r2,0x1ef8
    1650:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
    1654:	34 63 00 01 	addi r3,r3,1
    1658:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
    165c:	34 01 00 0e 	mvi r1,14
    1660:	58 41 00 00 	sw (r2+0),r1
}
    1664:	c3 a0 00 00 	ret

00001668 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
    1668:	37 9c ff f0 	addi sp,sp,-16
    166c:	5b 8b 00 10 	sw (sp+16),r11
    1670:	5b 8c 00 0c 	sw (sp+12),r12
    1674:	5b 8d 00 08 	sw (sp+8),r13
    1678:	5b 9d 00 04 	sw (sp+4),ra
    167c:	78 0b 00 00 	mvhi r11,0x0
    1680:	39 6b 1f 04 	ori r11,r11,0x1f04
    1684:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
    1688:	35 6d 00 80 	addi r13,r11,128
    168c:	e0 00 00 04 	bi 169c <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
    1690:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
    1694:	45 6d 00 08 	be r11,r13,16b4 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
    1698:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
    169c:	21 81 00 01 	andi r1,r12,0x1
    16a0:	44 20 ff fc 	be r1,r0,1690 <irq_handler+0x28>
    16a4:	29 61 00 00 	lw r1,(r11+0)
    16a8:	35 6b 00 04 	addi r11,r11,4
    16ac:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
    16b0:	5d 6d ff fa 	bne r11,r13,1698 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
    16b4:	2b 9d 00 04 	lw ra,(sp+4)
    16b8:	2b 8b 00 10 	lw r11,(sp+16)
    16bc:	2b 8c 00 0c 	lw r12,(sp+12)
    16c0:	2b 8d 00 08 	lw r13,(sp+8)
    16c4:	37 9c 00 10 	addi sp,sp,16
    16c8:	c3 a0 00 00 	ret

000016cc <isr_init>:

void isr_init()
{
    16cc:	78 01 00 00 	mvhi r1,0x0
    16d0:	78 02 00 00 	mvhi r2,0x0
    16d4:	38 21 1f 04 	ori r1,r1,0x1f04
    16d8:	38 42 16 38 	ori r2,r2,0x1638
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
    16dc:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
    16e0:	58 22 00 00 	sw (r1+0),r2
    16e4:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
    16e8:	5c 23 ff fe 	bne r1,r3,16e0 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
    16ec:	c3 a0 00 00 	ret

000016f0 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
    16f0:	78 03 00 00 	mvhi r3,0x0
    16f4:	3c 21 00 02 	sli r1,r1,2
    16f8:	38 63 1f 04 	ori r3,r3,0x1f04
    16fc:	b4 61 18 00 	add r3,r3,r1
    1700:	58 62 00 00 	sw (r3+0),r2
}
    1704:	c3 a0 00 00 	ret

00001708 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
    1708:	78 03 00 00 	mvhi r3,0x0
    170c:	3c 21 00 02 	sli r1,r1,2
    1710:	38 63 1f 04 	ori r3,r3,0x1f04
    1714:	78 02 00 00 	mvhi r2,0x0
    1718:	b4 61 18 00 	add r3,r3,r1
    171c:	38 42 16 38 	ori r2,r2,0x1638
    1720:	58 62 00 00 	sw (r3+0),r2
}
    1724:	c3 a0 00 00 	ret

00001728 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
    1728:	78 04 00 00 	mvhi r4,0x0
    172c:	38 84 1e b4 	ori r4,r4,0x1eb4
    1730:	28 83 00 00 	lw r3,(r4+0)
    1734:	78 02 00 00 	mvhi r2,0x0
    1738:	38 42 1e f8 	ori r2,r2,0x1ef8
    173c:	28 42 00 00 	lw r2,(r2+0)
    1740:	88 23 08 00 	mul r1,r1,r3
    1744:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
    1748:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
    174c:	34 01 00 0a 	mvi r1,10
    1750:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
    1754:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
    1758:	20 21 00 01 	andi r1,r1,0x1
    175c:	44 20 ff fe 	be r1,r0,1754 <msleep+0x2c>
}
    1760:	c3 a0 00 00 	ret

00001764 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
    1764:	78 02 00 00 	mvhi r2,0x0
    1768:	38 42 1e f8 	ori r2,r2,0x1ef8
    176c:	28 42 00 00 	lw r2,(r2+0)
    1770:	08 21 00 64 	muli r1,r1,100
    1774:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
    1778:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
    177c:	34 01 00 0a 	mvi r1,10
    1780:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
    1784:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
    1788:	20 21 00 01 	andi r1,r1,0x1
    178c:	44 20 ff fe 	be r1,r0,1784 <nsleep+0x20>
}
    1790:	c3 a0 00 00 	ret

00001794 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
    1794:	78 01 00 00 	mvhi r1,0x0
    1798:	38 21 1e f8 	ori r1,r1,0x1ef8
    179c:	28 23 00 00 	lw r3,(r1+0)
    17a0:	34 02 27 10 	mvi r2,10000



void tic_init()
{
	tic_msec = 0;
    17a4:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
    17a8:	58 62 00 04 	sw (r3+4),r2



void tic_init()
{
	tic_msec = 0;
    17ac:	38 21 1f 84 	ori r1,r1,0x1f84

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
    17b0:	58 60 00 08 	sw (r3+8),r0



void tic_init()
{
	tic_msec = 0;
    17b4:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
    17b8:	78 02 00 00 	mvhi r2,0x0
    17bc:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
    17c0:	34 04 00 0e 	mvi r4,14
    17c4:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
    17c8:	38 21 1f 04 	ori r1,r1,0x1f04
    17cc:	38 42 16 3c 	ori r2,r2,0x163c
    17d0:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);	
}
    17d4:	c3 a0 00 00 	ret

000017d8 <wifi_getchar>:
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
    17d8:	78 01 00 00 	mvhi r1,0x0
    17dc:	38 21 1e e8 	ori r1,r1,0x1ee8
    17e0:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
    17e4:	34 03 00 00 	mvi r3,0
		c = uart_getchar();
		if (c ==':'){
    17e8:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
    17ec:	34 05 00 14 	mvi r5,20
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
    17f0:	28 41 00 00 	lw r1,(r2+0)
    17f4:	20 21 00 01 	andi r1,r1,0x1
    17f8:	44 20 ff fe 	be r1,r0,17f0 <wifi_getchar+0x18>
	return uart0->rxtx;
    17fc:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
    1800:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar();
		if (c ==':'){
    1804:	20 21 00 ff 	andi r1,r1,0xff
    1808:	44 24 00 04 	be r1,r4,1818 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
    180c:	5c 65 ff f9 	bne r3,r5,17f0 <wifi_getchar+0x18>
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
    1810:	34 01 00 0a 	mvi r1,10

}
    1814:	c3 a0 00 00 	ret
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
    1818:	28 41 00 00 	lw r1,(r2+0)
    181c:	20 21 00 01 	andi r1,r1,0x1
    1820:	44 20 ff fe 	be r1,r0,1818 <wifi_getchar+0x40>
	return uart0->rxtx;
    1824:	28 41 00 04 	lw r1,(r2+4)
    1828:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar();
		if (c ==':'){
			c = uart_getchar();
			return c;
    182c:	c3 a0 00 00 	ret

00001830 <ok>:
	return 0;

}*/

int ok()
{
    1830:	37 9c ff d0 	addi sp,sp,-48
    1834:	5b 8b 00 08 	sw (sp+8),r11
    1838:	5b 8c 00 04 	sw (sp+4),r12
			return cond;
			break;
		}
		else if(buffer[0]=="E"&& buffer[1]=="R" && buffer[2]=="R"&& buffer[3]=="O" && buffer[4]=="R"){
			cond = 0;
			return cond;
    183c:	78 01 00 00 	mvhi r1,0x0
    1840:	38 21 1e e8 	ori r1,r1,0x1ee8
    1844:	78 08 00 00 	mvhi r8,0x0
    1848:	28 22 00 00 	lw r2,(r1+0)
    184c:	39 08 1e b8 	ori r8,r8,0x1eb8

		if(buffer[0]=="O"&& buffer[1]=="K"){
			return cond;
			break;
		}
		else if(buffer[0]=="E"&& buffer[1]=="R" && buffer[2]=="R"&& buffer[3]=="O" && buffer[4]=="R"){
    1850:	78 09 00 00 	mvhi r9,0x0
    1854:	78 0a 00 00 	mvhi r10,0x0
		while(variable!=10  && ind < TAMBUFF){
			buffer[ind++]=variable;
			variable=uart_getchar();
		}		

		if(buffer[0]=="O"&& buffer[1]=="K"){
    1858:	78 0b 00 00 	mvhi r11,0x0
    185c:	b9 00 60 00 	mv r12,r8
			return cond;
			break;
		}
		else if(buffer[0]=="E"&& buffer[1]=="R" && buffer[2]=="R"&& buffer[3]=="O" && buffer[4]=="R"){
    1860:	39 29 1e c0 	ori r9,r9,0x1ec0
    1864:	39 4a 1e c4 	ori r10,r10,0x1ec4
		while(variable!=10  && ind < TAMBUFF){
			buffer[ind++]=variable;
			variable=uart_getchar();
		}		

		if(buffer[0]=="O"&& buffer[1]=="K"){
    1868:	39 6b 1e bc 	ori r11,r11,0x1ebc
    186c:	37 87 00 34 	addi r7,sp,52
	while(cond)
	{
		
		char variable=uart_getchar();
		char ind=0;
		while(variable!=10  && ind < TAMBUFF){
    1870:	34 06 00 09 	mvi r6,9
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
    1874:	28 41 00 00 	lw r1,(r2+0)
    1878:	20 21 00 01 	andi r1,r1,0x1
    187c:	44 20 ff fe 	be r1,r0,1874 <ok+0x44>
	return uart0->rxtx;
    1880:	28 41 00 04 	lw r1,(r2+4)
    1884:	20 21 00 ff 	andi r1,r1,0xff
	while(cond)
	{
		
		char variable=uart_getchar();
		char ind=0;
		while(variable!=10  && ind < TAMBUFF){
    1888:	7c 23 00 0a 	cmpnei r3,r1,10
    188c:	44 60 00 10 	be r3,r0,18cc <ok+0x9c>
    1890:	34 03 00 00 	mvi r3,0
			buffer[ind++]=variable;
    1894:	3c 64 00 02 	sli r4,r3,2
    1898:	34 63 00 01 	addi r3,r3,1
    189c:	b4 e4 20 00 	add r4,r7,r4
    18a0:	58 81 ff d8 	sw (r4+-40),r1
    18a4:	20 63 00 ff 	andi r3,r3,0xff
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
    18a8:	28 41 00 00 	lw r1,(r2+0)
    18ac:	20 21 00 01 	andi r1,r1,0x1
    18b0:	44 20 ff fe 	be r1,r0,18a8 <ok+0x78>
	return uart0->rxtx;
    18b4:	28 41 00 04 	lw r1,(r2+4)
	while(cond)
	{
		
		char variable=uart_getchar();
		char ind=0;
		while(variable!=10  && ind < TAMBUFF){
    18b8:	f0 c3 28 00 	cmpgeu r5,r6,r3
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
	return uart0->rxtx;
    18bc:	20 21 00 ff 	andi r1,r1,0xff
	while(cond)
	{
		
		char variable=uart_getchar();
		char ind=0;
		while(variable!=10  && ind < TAMBUFF){
    18c0:	7c 24 00 0a 	cmpnei r4,r1,10
    18c4:	a0 a4 20 00 	and r4,r5,r4
    18c8:	5c 80 ff f3 	bne r4,r0,1894 <ok+0x64>
			buffer[ind++]=variable;
			variable=uart_getchar();
		}		

		if(buffer[0]=="O"&& buffer[1]=="K"){
    18cc:	2b 81 00 0c 	lw r1,(sp+12)
    18d0:	44 28 00 0c 	be r1,r8,1900 <ok+0xd0>
			return cond;
			break;
		}
		else if(buffer[0]=="E"&& buffer[1]=="R" && buffer[2]=="R"&& buffer[3]=="O" && buffer[4]=="R"){
    18d4:	5c 29 ff e8 	bne r1,r9,1874 <ok+0x44>
    18d8:	2b 81 00 10 	lw r1,(sp+16)
    18dc:	5c 2a ff e6 	bne r1,r10,1874 <ok+0x44>
    18e0:	2b 81 00 14 	lw r1,(sp+20)
    18e4:	5c 2a ff e4 	bne r1,r10,1874 <ok+0x44>
    18e8:	2b 81 00 18 	lw r1,(sp+24)
    18ec:	5c 2c ff e2 	bne r1,r12,1874 <ok+0x44>
    18f0:	2b 81 00 1c 	lw r1,(sp+28)
    18f4:	5c 2a ff e0 	bne r1,r10,1874 <ok+0x44>
			cond = 0;
			return cond;
    18f8:	34 01 00 00 	mvi r1,0
    18fc:	e0 00 00 04 	bi 190c <ok+0xdc>
		while(variable!=10  && ind < TAMBUFF){
			buffer[ind++]=variable;
			variable=uart_getchar();
		}		

		if(buffer[0]=="O"&& buffer[1]=="K"){
    1900:	2b 81 00 10 	lw r1,(sp+16)
    1904:	5c 2b ff dc 	bne r1,r11,1874 <ok+0x44>
			return cond;
    1908:	34 01 00 01 	mvi r1,1
		}
		/*else {
			buffer[]= 0;
		}*/
	}
}
    190c:	2b 8b 00 08 	lw r11,(sp+8)
    1910:	2b 8c 00 04 	lw r12,(sp+4)
    1914:	37 9c 00 30 	addi sp,sp,48
    1918:	c3 a0 00 00 	ret

0000191c <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
    191c:	c3 a0 00 00 	ret

00001920 <uart_getchar>:

char uart_getchar()
{   
    1920:	78 01 00 00 	mvhi r1,0x0
    1924:	38 21 1e e8 	ori r1,r1,0x1ee8
    1928:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
    192c:	28 41 00 00 	lw r1,(r2+0)
    1930:	20 21 00 01 	andi r1,r1,0x1
    1934:	44 20 ff fe 	be r1,r0,192c <uart_getchar+0xc>
	return uart0->rxtx;
    1938:	28 41 00 04 	lw r1,(r2+4)
}
    193c:	20 21 00 ff 	andi r1,r1,0xff
    1940:	c3 a0 00 00 	ret

00001944 <uart_putchar>:

void uart_putchar(char c)
{
    1944:	78 02 00 00 	mvhi r2,0x0
    1948:	38 42 1e e8 	ori r2,r2,0x1ee8
    194c:	28 43 00 00 	lw r3,(r2+0)
    1950:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
    1954:	28 62 00 00 	lw r2,(r3+0)
    1958:	20 42 00 10 	andi r2,r2,0x10
    195c:	5c 40 ff fe 	bne r2,r0,1954 <uart_putchar+0x10>
	uart0->rxtx = c;
    1960:	58 61 00 04 	sw (r3+4),r1
}
    1964:	c3 a0 00 00 	ret

00001968 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
    1968:	40 24 00 00 	lbu r4,(r1+0)
    196c:	44 80 00 0b 	be r4,r0,1998 <uart_putstr+0x30>
    1970:	78 02 00 00 	mvhi r2,0x0
    1974:	38 42 1e e8 	ori r2,r2,0x1ee8
    1978:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
    197c:	28 62 00 00 	lw r2,(r3+0)
    1980:	20 42 00 10 	andi r2,r2,0x10
    1984:	5c 40 ff fe 	bne r2,r0,197c <uart_putstr+0x14>
	uart0->rxtx = c;
    1988:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
    198c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
    1990:	40 24 00 00 	lbu r4,(r1+0)
    1994:	5c 82 ff fa 	bne r4,r2,197c <uart_putstr+0x14>
    1998:	c3 a0 00 00 	ret

0000199c <wifi_putchar>:
                }
            }
        }
}

void wifi_putchar(char a){
    199c:	37 9c ff ec 	addi sp,sp,-20
    19a0:	5b 8b 00 14 	sw (sp+20),r11
    19a4:	5b 8c 00 10 	sw (sp+16),r12
    19a8:	5b 8d 00 0c 	sw (sp+12),r13
    19ac:	5b 8e 00 08 	sw (sp+8),r14
    19b0:	5b 9d 00 04 	sw (sp+4),ra
    19b4:	78 0d 00 00 	mvhi r13,0x0
    19b8:	78 0c 00 00 	mvhi r12,0x0
    19bc:	20 2e 00 ff 	andi r14,r1,0xff
    19c0:	39 ad 1e c8 	ori r13,r13,0x1ec8
    19c4:	39 8c 1e e8 	ori r12,r12,0x1ee8
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
    19c8:	b9 a0 08 00 	mv r1,r13
    19cc:	fb ff ff e7 	calli 1968 <uart_putstr>
    19d0:	29 82 00 00 	lw r2,(r12+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
    19d4:	28 4b 00 00 	lw r11,(r2+0)
    19d8:	21 6b 00 10 	andi r11,r11,0x10
    19dc:	5d 60 ff fe 	bne r11,r0,19d4 <wifi_putchar+0x38>
	uart0->rxtx = c;
    19e0:	58 4e 00 04 	sw (r2+4),r14
void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
    19e4:	fb ff ff 93 	calli 1830 <ok>
        }
}

void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
    19e8:	44 2b ff f8 	be r1,r11,19c8 <wifi_putchar+0x2c>
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
	}
}
    19ec:	2b 9d 00 04 	lw ra,(sp+4)
    19f0:	2b 8b 00 14 	lw r11,(sp+20)
    19f4:	2b 8c 00 10 	lw r12,(sp+16)
    19f8:	2b 8d 00 0c 	lw r13,(sp+12)
    19fc:	2b 8e 00 08 	lw r14,(sp+8)
    1a00:	37 9c 00 14 	addi sp,sp,20
    1a04:	c3 a0 00 00 	ret

00001a08 <init_wifi>:

/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
    1a08:	37 9c ff f8 	addi sp,sp,-8
    1a0c:	5b 8b 00 08 	sw (sp+8),r11
    1a10:	5b 9d 00 04 	sw (sp+4),ra
    1a14:	78 0b 00 00 	mvhi r11,0x0
    1a18:	39 6b 1e 24 	ori r11,r11,0x1e24
        int c = 0;
        while(~c){
            uart_putstr("AT+RST\r\n");
    1a1c:	b9 60 08 00 	mv r1,r11
    1a20:	fb ff ff d2 	calli 1968 <uart_putstr>
            msleep(500);
    1a24:	34 01 01 f4 	mvi r1,500
    1a28:	fb ff ff 40 	calli 1728 <msleep>
    1a2c:	e3 ff ff fc 	bi 1a1c <init_wifi+0x14>

00001a30 <spi_start>:
 * SPI Functions
 */
//These are the specific funtions for the rc522 rfid reader card
void spi_start()
{
	spi0->ucr=0x1;
    1a30:	78 01 00 00 	mvhi r1,0x0
    1a34:	38 21 1e f4 	ori r1,r1,0x1ef4
    1a38:	28 21 00 00 	lw r1,(r1+0)
    1a3c:	34 02 00 01 	mvi r2,1
    1a40:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
    1a44:	58 20 00 00 	sw (r1+0),r0
}
    1a48:	c3 a0 00 00 	ret

00001a4c <spi_read>:
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
	regAddress = regAddress << 8;
    1a4c:	78 02 00 00 	mvhi r2,0x0
	spi0->ucr=0x0;
}
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
    1a50:	20 21 00 7e 	andi r1,r1,0x7e
	regAddress = regAddress << 8;
    1a54:	38 42 1e f4 	ori r2,r2,0x1ef4
	spi0->ucr=0x0;
}
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
    1a58:	38 23 00 80 	ori r3,r1,0x80
	regAddress = regAddress << 8;
    1a5c:	28 41 00 00 	lw r1,(r2+0)
    1a60:	3c 63 00 08 	sli r3,r3,8
	while(spi0->ucr & SPI_BUSY);
    1a64:	28 22 00 00 	lw r2,(r1+0)
    1a68:	20 42 00 02 	andi r2,r2,0x2
    1a6c:	5c 40 ff fe 	bne r2,r0,1a64 <spi_read+0x18>
	spi0->data_in= regAddress;
    1a70:	58 23 00 04 	sw (r1+4),r3
 * SPI Functions
 */
//These are the specific funtions for the rc522 rfid reader card
void spi_start()
{
	spi0->ucr=0x1;
    1a74:	34 02 00 01 	mvi r2,1
    1a78:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
    1a7c:	58 20 00 00 	sw (r1+0),r0
	uint32_t regAddress = (0x80 | (reg & 0x7E));
	regAddress = regAddress << 8;
	while(spi0->ucr & SPI_BUSY);
	spi0->data_in= regAddress;
	spi_start();
	while(spi0->ucr & SPI_BUSY);
    1a80:	28 22 00 00 	lw r2,(r1+0)
    1a84:	20 42 00 02 	andi r2,r2,0x2
    1a88:	5c 40 ff fe 	bne r2,r0,1a80 <spi_read+0x34>
	
	return spi0->data_out;	
    1a8c:	28 21 00 08 	lw r1,(r1+8)
}
    1a90:	20 21 00 ff 	andi r1,r1,0xff
    1a94:	c3 a0 00 00 	ret

00001a98 <spi_write>:
void spi_write (char reg, char value)
{
	//reg=reg<<1;
	uint32_t regAddress=(reg & 0x7E);
    1a98:	20 21 00 7e 	andi r1,r1,0x7e
	regAddress = regAddress << 8;
    1a9c:	3c 24 00 08 	sli r4,r1,8
	uint32_t data0 = regAddress | value;
    1aa0:	78 03 00 00 	mvhi r3,0x0
    1aa4:	38 63 1e f4 	ori r3,r3,0x1ef4
	while(spi0->ucr & SPI_BUSY);
	
	return spi0->data_out;	
}
void spi_write (char reg, char value)
{
    1aa8:	20 42 00 ff 	andi r2,r2,0xff
	//reg=reg<<1;
	uint32_t regAddress=(reg & 0x7E);
	regAddress = regAddress << 8;
	uint32_t data0 = regAddress | value;
    1aac:	28 61 00 00 	lw r1,(r3+0)
    1ab0:	b8 82 18 00 	or r3,r4,r2
	while(spi0->ucr & SPI_BUSY);
    1ab4:	28 22 00 00 	lw r2,(r1+0)
    1ab8:	20 42 00 02 	andi r2,r2,0x2
    1abc:	5c 40 ff fe 	bne r2,r0,1ab4 <spi_write+0x1c>
	spi0->data_in=data0;
    1ac0:	58 23 00 04 	sw (r1+4),r3
 * SPI Functions
 */
//These are the specific funtions for the rc522 rfid reader card
void spi_start()
{
	spi0->ucr=0x1;
    1ac4:	34 02 00 01 	mvi r2,1
    1ac8:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
    1acc:	58 20 00 00 	sw (r1+0),r0
	regAddress = regAddress << 8;
	uint32_t data0 = regAddress | value;
	while(spi0->ucr & SPI_BUSY);
	spi0->data_in=data0;
	spi_start();
}
    1ad0:	c3 a0 00 00 	ret

00001ad4 <initdir>:
	gpio0->ctrl = 0x18;
	gpio0->oe = signal;
}
*/
void initdir(int first, int direction){
	gpio0->oe = direction;
    1ad4:	78 03 00 00 	mvhi r3,0x0
    1ad8:	38 63 1e f0 	ori r3,r3,0x1ef0
    1adc:	28 63 00 00 	lw r3,(r3+0)
    1ae0:	58 62 00 0c 	sw (r3+12),r2
	gpio0->out = first; //inicializar gpio
    1ae4:	58 61 00 08 	sw (r3+8),r1
	
}
    1ae8:	c3 a0 00 00 	ret

00001aec <read_last>:


int read_last(){
	int ultimo;
	ultimo = gpio0->last;
    1aec:	78 01 00 00 	mvhi r1,0x0
    1af0:	38 21 1e f0 	ori r1,r1,0x1ef0
    1af4:	28 21 00 00 	lw r1,(r1+0)
    1af8:	28 21 00 04 	lw r1,(r1+4)
	return ultimo;
}
    1afc:	c3 a0 00 00 	ret

00001b00 <write_fila>:
	char flag1;
	char flag2;
	char flag3;
	char flag4;

	switch (code){
    1b00:	34 02 00 02 	mvi r2,2
    1b04:	44 22 00 1f 	be r1,r2,1b80 <write_fila+0x80>
    1b08:	48 22 00 0a 	bg r1,r2,1b30 <write_fila+0x30>
    1b0c:	34 02 00 01 	mvi r2,1
    1b10:	44 22 00 24 	be r1,r2,1ba0 <write_fila+0xa0>
}


int read_last(){
	int ultimo;
	ultimo = gpio0->last;
    1b14:	78 01 00 00 	mvhi r1,0x0
    1b18:	38 21 1e f0 	ori r1,r1,0x1ef0
    1b1c:	28 21 00 00 	lw r1,(r1+0)
    1b20:	28 22 00 04 	lw r2,(r1+4)
			flag4 = 35 & (32 | read_last());	
			gpio0->out = flag4;
			break;
		default: 
			flag0 = 3 & read_last();
			gpio0->out = flag0;
    1b24:	20 42 00 03 	andi r2,r2,0x3
    1b28:	58 22 00 08 	sw (r1+8),r2
    1b2c:	c3 a0 00 00 	ret
	char flag1;
	char flag2;
	char flag3;
	char flag4;

	switch (code){
    1b30:	34 02 00 04 	mvi r2,4
    1b34:	44 22 00 0b 	be r1,r2,1b60 <write_fila+0x60>
    1b38:	34 02 00 08 	mvi r2,8
    1b3c:	5c 22 ff f6 	bne r1,r2,1b14 <write_fila+0x14>
}


int read_last(){
	int ultimo;
	ultimo = gpio0->last;
    1b40:	78 01 00 00 	mvhi r1,0x0
    1b44:	38 21 1e f0 	ori r1,r1,0x1ef0
    1b48:	28 21 00 00 	lw r1,(r1+0)
    1b4c:	28 22 00 04 	lw r2,(r1+4)
		case 4: 
			flag3 = 19 & (16 | read_last());	
			gpio0->out = flag3;
			break;
		case 8: 
			flag4 = 35 & (32 | read_last());	
    1b50:	20 42 00 03 	andi r2,r2,0x3
			gpio0->out = flag4;
    1b54:	38 42 00 20 	ori r2,r2,0x20
    1b58:	58 22 00 08 	sw (r1+8),r2
			break;
    1b5c:	c3 a0 00 00 	ret
}


int read_last(){
	int ultimo;
	ultimo = gpio0->last;
    1b60:	78 01 00 00 	mvhi r1,0x0
    1b64:	38 21 1e f0 	ori r1,r1,0x1ef0
    1b68:	28 21 00 00 	lw r1,(r1+0)
    1b6c:	28 22 00 04 	lw r2,(r1+4)
		case 2: 
			flag2 = 11 & (8 | read_last());	
			gpio0->out = flag2;
			break;
		case 4: 
			flag3 = 19 & (16 | read_last());	
    1b70:	20 42 00 03 	andi r2,r2,0x3
			gpio0->out = flag3;
    1b74:	38 42 00 10 	ori r2,r2,0x10
    1b78:	58 22 00 08 	sw (r1+8),r2
			break;
    1b7c:	c3 a0 00 00 	ret
}


int read_last(){
	int ultimo;
	ultimo = gpio0->last;
    1b80:	78 01 00 00 	mvhi r1,0x0
    1b84:	38 21 1e f0 	ori r1,r1,0x1ef0
    1b88:	28 21 00 00 	lw r1,(r1+0)
    1b8c:	28 22 00 04 	lw r2,(r1+4)
		case 1: 
			flag1 = 7 & (4 | read_last());	
			gpio0->out = flag1;
			break;
		case 2: 
			flag2 = 11 & (8 | read_last());	
    1b90:	20 42 00 03 	andi r2,r2,0x3
			gpio0->out = flag2;
    1b94:	38 42 00 08 	ori r2,r2,0x8
    1b98:	58 22 00 08 	sw (r1+8),r2
			break;
    1b9c:	c3 a0 00 00 	ret
}


int read_last(){
	int ultimo;
	ultimo = gpio0->last;
    1ba0:	78 01 00 00 	mvhi r1,0x0
    1ba4:	38 21 1e f0 	ori r1,r1,0x1ef0
    1ba8:	28 21 00 00 	lw r1,(r1+0)
    1bac:	28 22 00 04 	lw r2,(r1+4)
	char flag4;

	switch (code){
			
		case 1: 
			flag1 = 7 & (4 | read_last());	
    1bb0:	20 42 00 03 	andi r2,r2,0x3
			gpio0->out = flag1;
    1bb4:	38 42 00 04 	ori r2,r2,0x4
    1bb8:	58 22 00 08 	sw (r1+8),r2
			break;
    1bbc:	c3 a0 00 00 	ret

00001bc0 <read_hums>:

	uint32_t inputh;
	uint32_t dataouth;
	uint32_t out;	
	
	inputh = 16320 & gpio0->in;
    1bc0:	78 01 00 00 	mvhi r1,0x0
    1bc4:	38 21 1e f0 	ori r1,r1,0x1ef0
    1bc8:	28 21 00 00 	lw r1,(r1+0)
	dataouth = inputh>>6;
 	
	out = 100-(100*(dataouth-90))/165; 
    1bcc:	34 02 00 a5 	mvi r2,165

	uint32_t inputh;
	uint32_t dataouth;
	uint32_t out;	
	
	inputh = 16320 & gpio0->in;
    1bd0:	28 21 00 00 	lw r1,(r1+0)
    1bd4:	20 21 3f c0 	andi r1,r1,0x3fc0
	dataouth = inputh>>6;
    1bd8:	00 21 00 06 	srui r1,r1,6
 	
	out = 100-(100*(dataouth-90))/165; 
    1bdc:	08 21 00 64 	muli r1,r1,100
    1be0:	34 21 dc d8 	addi r1,r1,-9000
    1be4:	8c 22 08 00 	divu r1,r1,r2
		
	return out;
    1be8:	34 02 00 64 	mvi r2,100
    1bec:	c8 41 08 00 	sub r1,r2,r1
}
    1bf0:	20 21 00 ff 	andi r1,r1,0xff
    1bf4:	c3 a0 00 00 	ret

00001bf8 <read_columna>:

char read_columna(){
	
	uint32_t inputc;
	uint32_t dataoutc;
	inputc = 245760 & gpio0->in;
    1bf8:	78 01 00 00 	mvhi r1,0x0
    1bfc:	38 21 1e f0 	ori r1,r1,0x1ef0
    1c00:	28 21 00 00 	lw r1,(r1+0)
    1c04:	28 21 00 00 	lw r1,(r1+0)
    1c08:	00 21 00 0e 	srui r1,r1,14
	dataoutc = inputc>>14;
	
	return dataoutc;		
}
    1c0c:	20 21 00 0f 	andi r1,r1,0xf
    1c10:	c3 a0 00 00 	ret

00001c14 <initled>:
}


int read_last(){
	int ultimo;
	ultimo = gpio0->last;
    1c14:	78 01 00 00 	mvhi r1,0x0
    1c18:	38 21 1e f0 	ori r1,r1,0x1ef0
    1c1c:	28 21 00 00 	lw r1,(r1+0)
    1c20:	28 22 00 04 	lw r2,(r1+4)
}



void initled(){
	int doutled1 = 2 | read_last();
    1c24:	38 42 00 02 	ori r2,r2,0x2
	gpio0->out = doutled1;	
    1c28:	58 22 00 08 	sw (r1+8),r2
}
    1c2c:	c3 a0 00 00 	ret

00001c30 <offled>:
}


int read_last(){
	int ultimo;
	ultimo = gpio0->last;
    1c30:	78 01 00 00 	mvhi r1,0x0
    1c34:	38 21 1e f0 	ori r1,r1,0x1ef0
    1c38:	28 21 00 00 	lw r1,(r1+0)
    1c3c:	28 22 00 04 	lw r2,(r1+4)
	int doutled1 = 2 | read_last();
	gpio0->out = doutled1;	
}

void offled(){
	int doutled2 = 61 & read_last();
    1c40:	20 42 00 3d 	andi r2,r2,0x3d
	gpio0->out = doutled2; 	
    1c44:	58 22 00 08 	sw (r1+8),r2
}
    1c48:	c3 a0 00 00 	ret

00001c4c <initvalve>:
}


int read_last(){
	int ultimo;
	ultimo = gpio0->last;
    1c4c:	78 01 00 00 	mvhi r1,0x0
    1c50:	38 21 1e f0 	ori r1,r1,0x1ef0
    1c54:	28 21 00 00 	lw r1,(r1+0)
    1c58:	28 22 00 04 	lw r2,(r1+4)
	int doutled2 = 61 & read_last();
	gpio0->out = doutled2; 	
}

void initvalve(){
	int doutvalve1 = 1 | read_last();	
    1c5c:	38 42 00 01 	ori r2,r2,0x1
	gpio0->out = doutvalve1; 
    1c60:	58 22 00 08 	sw (r1+8),r2
}
    1c64:	c3 a0 00 00 	ret

00001c68 <offvalve>:
}


int read_last(){
	int ultimo;
	ultimo = gpio0->last;
    1c68:	78 01 00 00 	mvhi r1,0x0
    1c6c:	38 21 1e f0 	ori r1,r1,0x1ef0
    1c70:	28 21 00 00 	lw r1,(r1+0)
    1c74:	28 22 00 04 	lw r2,(r1+4)
	int doutvalve1 = 1 | read_last();	
	gpio0->out = doutvalve1; 
}

void offvalve(){
	int doutvalve2 = 62 & read_last();
    1c78:	20 42 00 3e 	andi r2,r2,0x3e
	gpio0->out = doutvalve2;
    1c7c:	58 22 00 08 	sw (r1+8),r2
} 
    1c80:	c3 a0 00 00 	ret

00001c84 <initclkadc>:

void initclkadc(){
	gpio0->initadc = 1;
    1c84:	78 01 00 00 	mvhi r1,0x0
    1c88:	38 21 1e f0 	ori r1,r1,0x1ef0
    1c8c:	28 21 00 00 	lw r1,(r1+0)
    1c90:	34 02 00 01 	mvi r2,1
    1c94:	58 22 00 10 	sw (r1+16),r2
}
    1c98:	c3 a0 00 00 	ret

00001c9c <i2c_write>:
* i2c Functons
*/


void i2c_write (unsigned char dir, unsigned char data)
{ 
    1c9c:	78 03 00 00 	mvhi r3,0x0
    1ca0:	38 63 1e e4 	ori r3,r3,0x1ee4
    1ca4:	28 64 00 00 	lw r4,(r3+0)
    1ca8:	20 21 00 ff 	andi r1,r1,0xff
    1cac:	20 42 00 ff 	andi r2,r2,0xff
   while(!((i2c0->ucr & I2C_DONE)));
    1cb0:	28 83 00 00 	lw r3,(r4+0)
    1cb4:	20 63 00 10 	andi r3,r3,0x10
    1cb8:	44 60 ff fe 	be r3,r0,1cb0 <i2c_write+0x14>
   i2c0->write =  dir<<9|data;
    1cbc:	3c 21 00 09 	sli r1,r1,9
    1cc0:	b8 41 10 00 	or r2,r2,r1
    1cc4:	58 82 00 10 	sw (r4+16),r2
}
    1cc8:	c3 a0 00 00 	ret

00001ccc <i2c_read>:


char i2c_read ( char dir)
{
    1ccc:	37 9c ff f8 	addi sp,sp,-8
    1cd0:	5b 8b 00 08 	sw (sp+8),r11
    1cd4:	5b 9d 00 04 	sw (sp+4),ra
    1cd8:	78 0b 00 00 	mvhi r11,0x0
    1cdc:	39 6b 1e e4 	ori r11,r11,0x1ee4
    1ce0:	29 63 00 00 	lw r3,(r11+0)
    1ce4:	20 21 00 ff 	andi r1,r1,0xff

    while(!((i2c0->ucr & I2C_DONE)));
    1ce8:	28 62 00 00 	lw r2,(r3+0)
    1cec:	20 42 00 10 	andi r2,r2,0x10
    1cf0:	44 40 ff fe 	be r2,r0,1ce8 <i2c_read+0x1c>
    i2c0->read=dir;
    1cf4:	58 61 00 0c 	sw (r3+12),r1
    nsleep(15); 
    1cf8:	34 01 00 0f 	mvi r1,15
    1cfc:	fb ff fe 9a 	calli 1764 <nsleep>
    1d00:	29 62 00 00 	lw r2,(r11+0)
    while(!((i2c0->ucr & I2C_DONE)));
    1d04:	28 41 00 00 	lw r1,(r2+0)
    1d08:	20 21 00 10 	andi r1,r1,0x10
    1d0c:	44 20 ff fe 	be r1,r0,1d04 <i2c_read+0x38>
    return i2c0->i2c_data_out;
    1d10:	28 41 00 04 	lw r1,(r2+4)

    
}
    1d14:	20 21 00 ff 	andi r1,r1,0xff
    1d18:	2b 9d 00 04 	lw ra,(sp+4)
    1d1c:	2b 8b 00 08 	lw r11,(sp+8)
    1d20:	37 9c 00 08 	addi sp,sp,8
    1d24:	c3 a0 00 00 	ret

00001d28 <i2c_clockfreq>:


void i2c_clockfreq(char div)
{
    1d28:	78 02 00 00 	mvhi r2,0x0
    1d2c:	38 42 1e e4 	ori r2,r2,0x1ee4
    1d30:	28 43 00 00 	lw r3,(r2+0)
    1d34:	20 21 00 ff 	andi r1,r1,0xff
      while(!((i2c0->ucr & I2C_DONE)));
    1d38:	28 62 00 00 	lw r2,(r3+0)
    1d3c:	20 42 00 10 	andi r2,r2,0x10
    1d40:	44 40 ff fe 	be r2,r0,1d38 <i2c_clockfreq+0x10>
      i2c0->divisor=div;
    1d44:	58 61 00 08 	sw (r3+8),r1

}
    1d48:	c3 a0 00 00 	ret

00001d4c <serial_init>:
/******************************************************************************
* Serial Functons
*/

void serial_init()
{
    1d4c:	37 9c ff fc 	addi sp,sp,-4
    1d50:	5b 9d 00 04 	sw (sp+4),ra
     serial0->measure = 1;
    1d54:	78 01 00 00 	mvhi r1,0x0
    1d58:	38 21 1e ec 	ori r1,r1,0x1eec
    1d5c:	28 22 00 00 	lw r2,(r1+0)
    1d60:	34 03 00 01 	mvi r3,1
     msleep(80);
    1d64:	34 01 00 50 	mvi r1,80
* Serial Functons
*/

void serial_init()
{
     serial0->measure = 1;
    1d68:	58 43 00 0c 	sw (r2+12),r3
     msleep(80);
    1d6c:	fb ff fe 6f 	calli 1728 <msleep>
}
    1d70:	2b 9d 00 04 	lw ra,(sp+4)
    1d74:	37 9c 00 04 	addi sp,sp,4
    1d78:	c3 a0 00 00 	ret

00001d7c <read_humidity>:

char read_humidity()
{   
    1d7c:	37 9c ff fc 	addi sp,sp,-4
    1d80:	5b 9d 00 04 	sw (sp+4),ra
    serial_init(); 
    1d84:	fb ff ff f2 	calli 1d4c <serial_init>
    return serial0->humidity;
    1d88:	78 01 00 00 	mvhi r1,0x0
    1d8c:	38 21 1e ec 	ori r1,r1,0x1eec
    1d90:	28 21 00 00 	lw r1,(r1+0)
    1d94:	28 21 00 00 	lw r1,(r1+0)
}
    1d98:	20 21 00 ff 	andi r1,r1,0xff
    1d9c:	2b 9d 00 04 	lw ra,(sp+4)
    1da0:	37 9c 00 04 	addi sp,sp,4
    1da4:	c3 a0 00 00 	ret

00001da8 <read_temperature>:

char read_temperature()
{
    1da8:	37 9c ff fc 	addi sp,sp,-4
    1dac:	5b 9d 00 04 	sw (sp+4),ra
    serial_init();
    1db0:	fb ff ff e7 	calli 1d4c <serial_init>
    return serial0->temperature;
    1db4:	78 01 00 00 	mvhi r1,0x0
    1db8:	38 21 1e ec 	ori r1,r1,0x1eec
    1dbc:	28 21 00 00 	lw r1,(r1+0)
    1dc0:	28 21 00 04 	lw r1,(r1+4)
}
    1dc4:	20 21 00 ff 	andi r1,r1,0xff
    1dc8:	2b 9d 00 04 	lw ra,(sp+4)
    1dcc:	37 9c 00 04 	addi sp,sp,4
    1dd0:	c3 a0 00 00 	ret

00001dd4 <read_sum>:

char read_sum()
{
    1dd4:	37 9c ff fc 	addi sp,sp,-4
    1dd8:	5b 9d 00 04 	sw (sp+4),ra
    serial_init();
    1ddc:	fb ff ff dc 	calli 1d4c <serial_init>
    return serial0->sum;
    1de0:	78 01 00 00 	mvhi r1,0x0
    1de4:	38 21 1e ec 	ori r1,r1,0x1eec
    1de8:	28 21 00 00 	lw r1,(r1+0)
    1dec:	28 21 00 08 	lw r1,(r1+8)
}
    1df0:	20 21 00 ff 	andi r1,r1,0xff
    1df4:	2b 9d 00 04 	lw ra,(sp+4)
    1df8:	37 9c 00 04 	addi sp,sp,4
    1dfc:	c3 a0 00 00 	ret

00001e00 <good>:

char good()
{    
     int ind = 0;
     int plus = serial0->temperature + serial0->humidity;
    1e00:	78 01 00 00 	mvhi r1,0x0
    1e04:	38 21 1e ec 	ori r1,r1,0x1eec
    1e08:	28 22 00 00 	lw r2,(r1+0)
    1e0c:	28 41 00 04 	lw r1,(r2+4)
    1e10:	28 43 00 00 	lw r3,(r2+0)
     if(plus == serial0->sum) ind = 1;
    1e14:	28 42 00 08 	lw r2,(r2+8)
}

char good()
{    
     int ind = 0;
     int plus = serial0->temperature + serial0->humidity;
    1e18:	b4 61 08 00 	add r1,r3,r1
     if(plus == serial0->sum) ind = 1;
     else ind = 0;
     
     return ind;   
}
    1e1c:	e4 22 08 00 	cmpe r1,r1,r2
    1e20:	c3 a0 00 00 	ret
